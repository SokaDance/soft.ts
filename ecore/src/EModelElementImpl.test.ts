// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import deepEqual from "deep-equal"
import { anything, instance, mock, verify, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAnnotation,
    EList,
    EModelElementImpl,
    ENotificationChain,
    EObject,
    EObjectInternal,
    EObjectList,
    EcoreConstants,
    ImmutableEList,
    getEcorePackage
} from "./internal.js"

interface EAnnotationInternal extends EAnnotation, EObjectInternal {}

describe("EModelElementImpl", () => {
    test("eStaticClass", () => {
        const o = new EModelElementImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getEModelElement())
    })

    test("getEAnnotations", () => {
        const o = new EModelElementImpl()
        expect(o.getEAnnotations()).not.toBeNull()
    })

    test("getEAnnotation", () => {
        const o = new EModelElementImpl()
        expect(() => o.getEAnnotation("")).toThrow(Error)
    })

    test("eGetFromID", () => {
        const o = new EModelElementImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS, true)).toStrictEqual(o.getEAnnotations())
        expect(
            deepEqual(
                o.eGetFromID(EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS, false),
                (o.getEAnnotations() as EObjectList<EAnnotation>).getUnResolvedList()
            )
        ).toBeTruthy()
    })

    test("eSetFromID", () => {
        const o = new EModelElementImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            // list with a value
            const mockValue = mock<EAnnotationInternal>()
            const value = instance(mockValue)
            const l = new ImmutableEList<EAnnotation>([value])
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            when(mockValue.eInverseAdd(o, EcoreConstants.EANNOTATION__EMODEL_ELEMENT, anything())).thenReturn(null)

            // set list with new contents
            o.eSetFromID(EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS, l)
            // checks
            expect(o.getEAnnotations().size()).toBe(1)
            expect(o.getEAnnotations().get(0)).toBe(value)
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            verify(mockValue.eInverseAdd(o, EcoreConstants.EANNOTATION__EMODEL_ELEMENT, anything())).once()
        }
    })

    test("eIsSetFromID", () => {
        const o = new EModelElementImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new EModelElementImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS)
            const v = o.eGetFromID(EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS, false)
            expect(v).not.toBeNull()
            const l = v as EList<EAnnotation>
            expect(l.isEmpty()).toBeTruthy()
        }
    })

    test("eInvokeFromID", () => {
        const o = new EModelElementImpl()
        expect(() => o.eInvokeFromID(-1, null)).toThrow(Error)
        expect(() => o.eInvokeFromID(EcoreConstants.EMODEL_ELEMENT__GET_EANNOTATION_ESTRING, null)).toThrow(Error)
    })

    test("eBasicInverseAdd", () => {
        const o = new EModelElementImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseAdd(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EAnnotationInternal>()
            const value = instance(mockValue)
            o.eBasicInverseAdd(value, EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS, null)
            expect(o.getEAnnotations().contains(value)).toBeTruthy()
        }
    })

    test("eBasicInverseRemove", () => {
        const o = new EModelElementImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications)
        }
        {
            // initialize list with a mock object
            const mockValue = mock<EAnnotationInternal>()
            const value = instance(mockValue)
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            when(mockValue.eInverseAdd(o, EcoreConstants.EANNOTATION__EMODEL_ELEMENT, anything())).thenReturn(null)

            o.getEAnnotations().add(value)

            // basic inverse remove
            o.eBasicInverseRemove(value, EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS, null)

            // check it was removed
            expect(o.getEAnnotations().contains(value)).toBeFalsy()
        }
    })
})
