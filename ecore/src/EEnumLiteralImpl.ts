// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group                                                 
//                                                                              
// This Source Code Form is subject to the terms of the Mozilla Public          
// License, v. 2.0. If a copy of the MPL was not distributed with this          
// file, You can obtain one at https://mozilla.org/MPL/2.0/.                    
//                                                                              
// *****************************************************************************


import {
    EClass,
    EEnum,
    EEnumLiteral,
    EList,
    ENamedElement,
    ENamedElementImpl,
    ENotification,
    ENotificationChain,
    ENotifyingList,
    EOPPOSITE_FEATURE_BASE,
    EObject,
    EObjectInternal,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage,
    isEObjectInternal,
    isEObjectList,
} from "./internal.js"


export class EEnumLiteralImpl extends ENamedElementImpl implements EEnumLiteral {
    protected _value: number
    protected _instance: any
    protected _literal: string
    

    constructor() {
        super()
        this._instance = null
        this._literal = ""
        this._value = 0
        
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEEnumLiteral()
    }

    
    // get the value of eEnum
    getEEnum(): EEnum {
        if (this.eContainerFeatureID() == EcoreConstants.EENUM_LITERAL__EENUM) {
            return this.eContainer() as EEnum
        }
        return null
    
    }
    
    
    // get the value of instance
    getInstance(): any {
        return this._instance
    
    }
    
    // set the value of instance
    setInstance(newInstance : any ): void {
        let oldInstance = this._instance
        this._instance = newInstance
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.EENUM_LITERAL__INSTANCE, oldInstance, newInstance))
        }
    
    }
    
    
    // get the value of literal
    getLiteral(): string {
        return this._literal
    
    }
    
    // set the value of literal
    setLiteral(newLiteral : string ): void {
        let oldLiteral = this._literal
        this._literal = newLiteral
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.EENUM_LITERAL__LITERAL, oldLiteral, newLiteral))
        }
    
    }
    
    
    // get the value of value
    getValue(): number {
        return this._value
    
    }
    
    // set the value of value
    setValue(newValue : number ): void {
        let oldValue = this._value
        this._value = newValue
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.EENUM_LITERAL__VALUE, oldValue, newValue))
        }
    
    }
    
    

    

    

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.EENUM_LITERAL__EENUM: {
                return this.getEEnum()
            }
            case EcoreConstants.EENUM_LITERAL__INSTANCE: {
                return this.getInstance()
            }
            case EcoreConstants.EENUM_LITERAL__LITERAL: {
                return this.getLiteral()
            }
            case EcoreConstants.EENUM_LITERAL__VALUE: {
                return this.getValue()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }
    
    
    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.EENUM_LITERAL__INSTANCE: {
    			this.setInstance(newValue as any)
                break
            }
            case EcoreConstants.EENUM_LITERAL__LITERAL: {
    			this.setLiteral(newValue as string)
                break
            }
            case EcoreConstants.EENUM_LITERAL__VALUE: {
    			this.setValue(newValue as number)
                break
            }
            default: {
            	super.eSetFromID(featureID, newValue)
            }
        }
    }
    
    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.EENUM_LITERAL__INSTANCE: {
    		this.setInstance(null)
                break
            }
            case EcoreConstants.EENUM_LITERAL__LITERAL: {
    		this.setLiteral("")
                break
            }
            case EcoreConstants.EENUM_LITERAL__VALUE: {
    		this.setValue(0)
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }
    
    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.EENUM_LITERAL__EENUM: {
                return this.getEEnum() != null
            }
            case EcoreConstants.EENUM_LITERAL__INSTANCE: {
                return this._instance != null
            }
            case EcoreConstants.EENUM_LITERAL__LITERAL: {
                return this._literal != ""
            }
            case EcoreConstants.EENUM_LITERAL__VALUE: {
                return this._value != 0
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
    
    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EENUM_LITERAL__EENUM: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.eBasicSetContainer(otherEnd, EcoreConstants.EENUM_LITERAL__EENUM, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }
    
    
    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EENUM_LITERAL__EENUM: {
                return this.eBasicSetContainer(null, EcoreConstants.EENUM_LITERAL__EENUM, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
    
    
}

