// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import { anything, capture, instance, mock, reset, verify, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAdapter,
    EEnum,
    EEnumLiteralImpl,
    ENotificationChain,
    EObject,
    EObjectInternal,
    EcoreConstants,
    getEcorePackage
} from "./internal.js"

interface EEnumInternal extends EEnum, EObjectInternal {}

describe("EEnumLiteralImpl", () => {
    test("eStaticClass", () => {
        const o = new EEnumLiteralImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getEEnumLiteral())
    })

    test("getEEnum", () => {
        // default
        const o = new EEnumLiteralImpl()
        expect(o.getEEnum()).toBeNull()

        // set a mock container
        const mockContainer = mock<EObject>()
        const container = instance(mockContainer)
        o.eSetInternalContainer(container, EcoreConstants.EENUM_LITERAL__EENUM)

        // no proxy
        when(mockContainer.eIsProxy()).thenReturn(false)
        expect(o.getEEnum()).toBe(container)
        verify(mockContainer.eIsProxy()).once()
    })

    test("getInstance", () => {
        const o = new EEnumLiteralImpl()
        // get default value
        expect(o.getInstance()).toBe(null)
    })

    test("setInstance", () => {
        const o = new EEnumLiteralImpl()
        const value = null

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setInstance(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getLiteral", () => {
        const o = new EEnumLiteralImpl()
        // get default value
        expect(o.getLiteral()).toBe("")
    })

    test("setLiteral", () => {
        const o = new EEnumLiteralImpl()
        const value = "Test String"

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setLiteral(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe("")
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getValue", () => {
        const o = new EEnumLiteralImpl()
        // get default value
        expect(o.getValue()).toBe(0)
    })

    test("setValue", () => {
        const o = new EEnumLiteralImpl()
        const value = 45

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setValue(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(0)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("eGetFromID", () => {
        const o = new EEnumLiteralImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.EENUM_LITERAL__EENUM, true)).toStrictEqual(o.getEEnum())
        expect(o.eGetFromID(EcoreConstants.EENUM_LITERAL__INSTANCE, true)).toStrictEqual(o.getInstance())
        expect(o.eGetFromID(EcoreConstants.EENUM_LITERAL__LITERAL, true)).toStrictEqual(o.getLiteral())
        expect(o.eGetFromID(EcoreConstants.EENUM_LITERAL__VALUE, true)).toStrictEqual(o.getValue())
    })

    test("eSetFromID", () => {
        const o = new EEnumLiteralImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            const value = null
            o.eSetFromID(EcoreConstants.EENUM_LITERAL__INSTANCE, value)
            expect(o.eGetFromID(EcoreConstants.EENUM_LITERAL__INSTANCE, false)).toBe(value)
        }
        {
            const value = "Test String"
            o.eSetFromID(EcoreConstants.EENUM_LITERAL__LITERAL, value)
            expect(o.eGetFromID(EcoreConstants.EENUM_LITERAL__LITERAL, false)).toBe(value)
        }
        {
            const value = 45
            o.eSetFromID(EcoreConstants.EENUM_LITERAL__VALUE, value)
            expect(o.eGetFromID(EcoreConstants.EENUM_LITERAL__VALUE, false)).toBe(value)
        }
    })

    test("eIsSetFromID", () => {
        const o = new EEnumLiteralImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.EENUM_LITERAL__EENUM)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EENUM_LITERAL__INSTANCE)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EENUM_LITERAL__LITERAL)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EENUM_LITERAL__VALUE)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new EEnumLiteralImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.EENUM_LITERAL__INSTANCE)
            const v = o.eGetFromID(EcoreConstants.EENUM_LITERAL__INSTANCE, false)
            expect(v).toBeNull()
        }
        {
            o.eUnsetFromID(EcoreConstants.EENUM_LITERAL__LITERAL)
            const v = o.eGetFromID(EcoreConstants.EENUM_LITERAL__LITERAL, false)
            expect(v).toBe("")
        }
        {
            o.eUnsetFromID(EcoreConstants.EENUM_LITERAL__VALUE)
            const v = o.eGetFromID(EcoreConstants.EENUM_LITERAL__VALUE, false)
            expect(v).toBe(0)
        }
    })

    test("eBasicInverseAdd", () => {
        const o = new EEnumLiteralImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseAdd(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EEnumInternal>()
            const value = instance(mockValue)
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eIsProxy()).thenReturn(false)
            o.eBasicInverseAdd(value, EcoreConstants.EENUM_LITERAL__EENUM, null)
            expect(o.getEEnum()).toBe(value)

            reset(mockValue)
            const mockOther = mock<EEnumInternal>()
            const other = instance(mockOther)
            when(mockOther.eResource()).thenReturn(null)
            when(mockOther.eIsProxy()).thenReturn(false)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eInverseRemove(o, EcoreConstants.EENUM__ELITERALS, null)).thenReturn(null)
            o.eBasicInverseAdd(other, EcoreConstants.EENUM_LITERAL__EENUM, null)
            expect(o.getEEnum()).toBe(other)
        }
    })

    test("eBasicInverseRemove", () => {
        const o = new EEnumLiteralImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EEnumInternal>()
            const value = instance(mockValue)
            o.eBasicInverseRemove(value, EcoreConstants.EENUM_LITERAL__EENUM, null)
        }
    })
})
