// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import deepEqual from "deep-equal"
import { anything, capture, instance, mock, verify, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAdapter,
    EClassifier,
    EGenericType,
    EGenericTypeImpl,
    EList,
    ENotificationChain,
    EOPPOSITE_FEATURE_BASE,
    EObject,
    EObjectInternal,
    EObjectList,
    EResource,
    EResourceSet,
    ETypeParameter,
    EcoreConstants,
    EventType,
    ImmutableEList,
    URI,
    getEcorePackage
} from "./internal.js"

interface EClassifierInternal extends EClassifier, EObjectInternal {}
interface EGenericTypeInternal extends EGenericType, EObjectInternal {}
interface ETypeParameterInternal extends ETypeParameter, EObjectInternal {}

describe("EGenericTypeImpl", () => {
    test("eStaticClass", () => {
        const o = new EGenericTypeImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getEGenericType())
    })

    test("getEClassifier", () => {
        const o = new EGenericTypeImpl()

        // get default value
        expect(o.getEClassifier()).toBeNull()

        // initialize object with a mock value
        const mockValue = mock<EClassifierInternal>()
        const value = instance(mockValue)
        o.setEClassifier(value)

        // events
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set object resource
        const mockResourceSet = mock<EResourceSet>()
        const resourceSet = instance(mockResourceSet)
        const mockResource = mock<EResource>()
        const resource = instance(mockResource)
        o.eSetInternalResource(resource)

        // get non resolved value
        when(mockValue.eIsProxy()).thenReturn(false)
        expect(o.getEClassifier()).toBe(value)
        verify(mockValue.eIsProxy()).once()

        // get a resolved value
        const mockURI = new URI("test:///uri")
        const mockResolved = mock<EClassifierInternal>()
        const resolved = instance(mockResolved)
        when(mockResolved.eProxyURI()).thenReturn(null)
        when(mockResource.eResourceSet()).thenReturn(resourceSet)
        when(mockResourceSet.getEObject(mockURI, true)).thenReturn(resolved)
        when(mockValue.eIsProxy()).thenReturn(true)
        when(mockValue.eProxyURI()).thenReturn(mockURI)
        expect(o.getEClassifier()).toBe(resolved)
    })

    test("setEClassifier", () => {
        const o = new EGenericTypeImpl()
        const mockValue = mock<EClassifierInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setEClassifier(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getELowerBound", () => {
        const o = new EGenericTypeImpl()

        // get default value
        expect(o.getELowerBound()).toBeNull()
    })

    test("setELowerBound", () => {
        const o = new EGenericTypeImpl()
        const mockValue = mock<EGenericTypeInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setELowerBound(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("basicSetELowerBound", () => {
        const o = new EGenericTypeImpl()
        const mockValue = mock<EGenericTypeInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // notification chain
        const mockNotifications = mock<ENotificationChain>()
        const notifications = instance(mockNotifications)

        // set value
        when(mockNotifications.add(anything())).thenReturn(true)
        o.basicSetELowerBound(value, notifications)

        // checks
        verify(mockNotifications.add(anything())).once()
        const [notification] = capture(mockNotifications.add).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getEventType()).toBe(EventType.SET)
        expect(notification.getFeatureID()).toBe(EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getERawType", () => {
        const o = new EGenericTypeImpl()

        // get default value
        expect(o.getERawType()).toBeNull()

        // initialize object with a mock value
        const mockValue = mock<EClassifierInternal>()
        const value = instance(mockValue)
        o.setERawType(value)

        // events
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set object resource
        const mockResourceSet = mock<EResourceSet>()
        const resourceSet = instance(mockResourceSet)
        const mockResource = mock<EResource>()
        const resource = instance(mockResource)
        o.eSetInternalResource(resource)

        // get non resolved value
        when(mockValue.eIsProxy()).thenReturn(false)
        expect(o.getERawType()).toBe(value)
        verify(mockValue.eIsProxy()).once()

        // get a resolved value
        const mockURI = new URI("test:///uri")
        const mockResolved = mock<EClassifierInternal>()
        const resolved = instance(mockResolved)
        when(mockResolved.eProxyURI()).thenReturn(null)
        when(mockResource.eResourceSet()).thenReturn(resourceSet)
        when(mockResourceSet.getEObject(mockURI, true)).thenReturn(resolved)
        when(mockValue.eIsProxy()).thenReturn(true)
        when(mockValue.eProxyURI()).thenReturn(mockURI)
        expect(o.getERawType()).toBe(resolved)
    })

    test("getETypeArguments", () => {
        const o = new EGenericTypeImpl()
        expect(o.getETypeArguments()).not.toBeNull()
    })

    test("getETypeParameter", () => {
        const o = new EGenericTypeImpl()

        // get default value
        expect(o.getETypeParameter()).toBeNull()
    })

    test("setETypeParameter", () => {
        const o = new EGenericTypeImpl()
        const mockValue = mock<ETypeParameterInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setETypeParameter(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getEUpperBound", () => {
        const o = new EGenericTypeImpl()

        // get default value
        expect(o.getEUpperBound()).toBeNull()
    })

    test("setEUpperBound", () => {
        const o = new EGenericTypeImpl()
        const mockValue = mock<EGenericTypeInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setEUpperBound(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("basicSetEUpperBound", () => {
        const o = new EGenericTypeImpl()
        const mockValue = mock<EGenericTypeInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // notification chain
        const mockNotifications = mock<ENotificationChain>()
        const notifications = instance(mockNotifications)

        // set value
        when(mockNotifications.add(anything())).thenReturn(true)
        o.basicSetEUpperBound(value, notifications)

        // checks
        verify(mockNotifications.add(anything())).once()
        const [notification] = capture(mockNotifications.add).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getEventType()).toBe(EventType.SET)
        expect(notification.getFeatureID()).toBe(EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("isInstance", () => {
        const o = new EGenericTypeImpl()
        expect(() => o.isInstance(null)).toThrow(Error)
    })

    test("eGetFromID", () => {
        const o = new EGenericTypeImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ECLASSIFIER, true)).toStrictEqual(o.getEClassifier())
        expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND, true)).toStrictEqual(o.getELowerBound())
        expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ERAW_TYPE, true)).toStrictEqual(o.getERawType())
        expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, true)).toStrictEqual(o.getETypeArguments())
        expect(
            deepEqual(
                o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, false),
                (o.getETypeArguments() as EObjectList<EGenericType>).getUnResolvedList()
            )
        ).toBeTruthy()
        expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_PARAMETER, true)).toStrictEqual(o.getETypeParameter())
        expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND, true)).toStrictEqual(o.getEUpperBound())
    })

    test("eSetFromID", () => {
        const o = new EGenericTypeImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            const mockValue = mock<EClassifierInternal>()
            const value = instance(mockValue)
            o.eSetFromID(EcoreConstants.EGENERIC_TYPE__ECLASSIFIER, value)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ECLASSIFIER, false)).toBe(value)
        }
        {
            const mockValue = mock<EGenericTypeInternal>()
            const value = instance(mockValue)
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            when(mockValue.eInverseAdd(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND, anything())).thenReturn(null)
            o.eSetFromID(EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND, value)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND, false)).toBe(value)
            verify(mockValue.eInverseAdd(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND, anything())).once()
        }
        {
            // list with a value
            const mockValue = mock<EGenericTypeInternal>()
            const value = instance(mockValue)
            const l = new ImmutableEList<EGenericType>([value])
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            when(mockValue.eInverseAdd(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, anything())).thenReturn(
                null
            )

            // set list with new contents
            o.eSetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, l)
            // checks
            expect(o.getETypeArguments().size()).toBe(1)
            expect(o.getETypeArguments().get(0)).toBe(value)
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            verify(mockValue.eInverseAdd(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, anything())).once()
        }

        {
            const mockValue = mock<ETypeParameterInternal>()
            const value = instance(mockValue)
            o.eSetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_PARAMETER, value)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_PARAMETER, false)).toBe(value)
        }
        {
            const mockValue = mock<EGenericTypeInternal>()
            const value = instance(mockValue)
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            when(mockValue.eInverseAdd(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND, anything())).thenReturn(null)
            o.eSetFromID(EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND, value)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND, false)).toBe(value)
            verify(mockValue.eInverseAdd(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND, anything())).once()
        }
    })

    test("eIsSetFromID", () => {
        const o = new EGenericTypeImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.EGENERIC_TYPE__ECLASSIFIER)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EGENERIC_TYPE__ERAW_TYPE)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_PARAMETER)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new EGenericTypeImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.EGENERIC_TYPE__ECLASSIFIER)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ECLASSIFIER, false)).toBeNull()
        }
        {
            o.eUnsetFromID(EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND, false)).toBeNull()
        }
        {
            o.eUnsetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS)
            const v = o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, false)
            expect(v).not.toBeNull()
            const l = v as EList<EGenericType>
            expect(l.isEmpty()).toBeTruthy()
        }
        {
            o.eUnsetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_PARAMETER)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__ETYPE_PARAMETER, false)).toBeNull()
        }
        {
            o.eUnsetFromID(EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND)
            expect(o.eGetFromID(EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND, false)).toBeNull()
        }
    })

    test("eInvokeFromID", () => {
        const o = new EGenericTypeImpl()
        expect(() => o.eInvokeFromID(-1, null)).toThrow(Error)
        expect(() => o.eInvokeFromID(EcoreConstants.EGENERIC_TYPE__IS_INSTANCE_EJAVAOBJECT, null)).toThrow(Error)
    })

    test("eBasicInverseRemove", () => {
        const o = new EGenericTypeImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EGenericTypeInternal>()
            const value = instance(mockValue)
            o.eBasicInverseRemove(value, EcoreConstants.EGENERIC_TYPE__ELOWER_BOUND, null)
        }
        {
            // initialize list with a mock object
            const mockValue = mock<EGenericTypeInternal>()
            const value = instance(mockValue)
            when(mockValue.eClass()).thenReturn(null)
            when(mockValue.eStaticClass()).thenReturn(null)
            when(mockValue.eInverseAdd(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, anything())).thenReturn(
                null
            )

            o.getETypeArguments().add(value)

            // basic inverse remove
            o.eBasicInverseRemove(value, EcoreConstants.EGENERIC_TYPE__ETYPE_ARGUMENTS, null)

            // check it was removed
            expect(o.getETypeArguments().contains(value)).toBeFalsy()
        }
        {
            const mockValue = mock<EGenericTypeInternal>()
            const value = instance(mockValue)
            o.eBasicInverseRemove(value, EcoreConstants.EGENERIC_TYPE__EUPPER_BOUND, null)
        }
    })
})
