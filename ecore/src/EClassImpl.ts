// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import {
    BasicEObjectList,
    EAttribute,
    EClass,
    EClassifier,
    EClassifierExt,
    EList,
    ENotificationChain,
    ENotifyingList,
    EObject,
    EOperation,
    EReference,
    EStructuralFeature,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage,
    isEObjectList
} from "./internal.js"

export class EClassImpl extends EClassifierExt implements EClass {
    protected _eReferences: EList<EReference>
    protected _eAllOperations: EList<EOperation>
    protected _eOperations: EList<EOperation>
    protected _eContainmentFeatures: EList<EStructuralFeature>
    protected _eCrossReferenceFeatures: EList<EStructuralFeature>
    protected _eAllStructuralFeatures: EList<EStructuralFeature>
    protected _eAttributes: EList<EAttribute>
    protected _eAllReferences: EList<EReference>
    protected _isAbstract: boolean
    protected _eIDAttribute: EAttribute
    protected _eAllSuperTypes: EList<EClass>
    protected _eStructuralFeatures: EList<EStructuralFeature>
    protected _isInterface: boolean
    protected _eAllAttributes: EList<EAttribute>
    protected _eAllContainments: EList<EReference>
    protected _eAllCrossReferences: EList<EReference>
    protected _eSuperTypes: EList<EClass>

    constructor() {
        super()
        this._eAllAttributes = null
        this._eAllContainments = null
        this._eAllCrossReferences = null
        this._eAllOperations = null
        this._eAllReferences = null
        this._eAllStructuralFeatures = null
        this._eAllSuperTypes = null
        this._eAttributes = null
        this._eContainmentFeatures = null
        this._eCrossReferenceFeatures = null
        this._eIDAttribute = null
        this._eOperations = null
        this._eReferences = null
        this._eStructuralFeatures = null
        this._eSuperTypes = null
        this._isAbstract = false
        this._isInterface = false
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEClass()
    }

    // get the value of eAllAttributes
    getEAllAttributes(): EList<EAttribute> {
        this.initEAllAttributes()
        return this._eAllAttributes
    }

    // set the value of eAllAttributes
    setEAllAttributes(newEAllAttributes: EList<EAttribute>) {
        const l = this.getEAllAttributes()
        l.clear()
        l.addAll(newEAllAttributes)
    }

    // get the value of eAllContainments
    getEAllContainments(): EList<EReference> {
        this.initEAllContainments()
        return this._eAllContainments
    }

    // set the value of eAllContainments
    setEAllContainments(newEAllContainments: EList<EReference>) {
        const l = this.getEAllContainments()
        l.clear()
        l.addAll(newEAllContainments)
    }

    // get the value of eAllCrossReferences
    getEAllCrossReferences(): EList<EReference> {
        this.initEAllCrossReferences()
        return this._eAllCrossReferences
    }

    // set the value of eAllCrossReferences
    setEAllCrossReferences(newEAllCrossReferences: EList<EReference>) {
        const l = this.getEAllCrossReferences()
        l.clear()
        l.addAll(newEAllCrossReferences)
    }

    // get the value of eAllOperations
    getEAllOperations(): EList<EOperation> {
        this.initEAllOperations()
        return this._eAllOperations
    }

    // set the value of eAllOperations
    setEAllOperations(newEAllOperations: EList<EOperation>) {
        const l = this.getEAllOperations()
        l.clear()
        l.addAll(newEAllOperations)
    }

    // get the value of eAllReferences
    getEAllReferences(): EList<EReference> {
        this.initEAllReferences()
        return this._eAllReferences
    }

    // set the value of eAllReferences
    setEAllReferences(newEAllReferences: EList<EReference>) {
        const l = this.getEAllReferences()
        l.clear()
        l.addAll(newEAllReferences)
    }

    // get the value of eAllStructuralFeatures
    getEAllStructuralFeatures(): EList<EStructuralFeature> {
        this.initEAllStructuralFeatures()
        return this._eAllStructuralFeatures
    }

    // set the value of eAllStructuralFeatures
    setEAllStructuralFeatures(newEAllStructuralFeatures: EList<EStructuralFeature>) {
        const l = this.getEAllStructuralFeatures()
        l.clear()
        l.addAll(newEAllStructuralFeatures)
    }

    // get the value of eAllSuperTypes
    getEAllSuperTypes(): EList<EClass> {
        this.initEAllSuperTypes()
        return this._eAllSuperTypes
    }

    // set the value of eAllSuperTypes
    setEAllSuperTypes(newEAllSuperTypes: EList<EClass>) {
        const l = this.getEAllSuperTypes()
        l.clear()
        l.addAll(newEAllSuperTypes)
    }

    // get the value of eAttributes
    getEAttributes(): EList<EAttribute> {
        this.initEAttributes()
        return this._eAttributes
    }

    // set the value of eAttributes
    setEAttributes(newEAttributes: EList<EAttribute>) {
        const l = this.getEAttributes()
        l.clear()
        l.addAll(newEAttributes)
    }

    // get the value of eContainmentFeatures
    getEContainmentFeatures(): EList<EStructuralFeature> {
        this.initEContainmentFeatures()
        return this._eContainmentFeatures
    }

    // set the value of eContainmentFeatures
    setEContainmentFeatures(newEContainmentFeatures: EList<EStructuralFeature>) {
        const l = this.getEContainmentFeatures()
        l.clear()
        l.addAll(newEContainmentFeatures)
    }

    // get the value of eCrossReferenceFeatures
    getECrossReferenceFeatures(): EList<EStructuralFeature> {
        this.initECrossReferenceFeatures()
        return this._eCrossReferenceFeatures
    }

    // set the value of eCrossReferenceFeatures
    setECrossReferenceFeatures(newECrossReferenceFeatures: EList<EStructuralFeature>) {
        const l = this.getECrossReferenceFeatures()
        l.clear()
        l.addAll(newECrossReferenceFeatures)
    }

    // get the value of eIDAttribute
    getEIDAttribute(): EAttribute {
        this.initEIDAttribute()
        return this._eIDAttribute
    }

    // set the value of eIDAttribute
    setEIDAttribute(newEIDAttribute: EAttribute) {
        this._eIDAttribute = newEIDAttribute
    }

    // get the value of eOperations
    getEOperations(): EList<EOperation> {
        if (this._eOperations == null) {
            this._eOperations = this.initEOperations()
        }
        return this._eOperations
    }

    // set the value of eOperations
    setEOperations(newEOperations: EList<EOperation>) {
        const l = this.getEOperations()
        l.clear()
        l.addAll(newEOperations)
    }

    // get the value of eReferences
    getEReferences(): EList<EReference> {
        this.initEReferences()
        return this._eReferences
    }

    // set the value of eReferences
    setEReferences(newEReferences: EList<EReference>) {
        const l = this.getEReferences()
        l.clear()
        l.addAll(newEReferences)
    }

    // get the value of eStructuralFeatures
    getEStructuralFeatures(): EList<EStructuralFeature> {
        if (this._eStructuralFeatures == null) {
            this._eStructuralFeatures = this.initEStructuralFeatures()
        }
        return this._eStructuralFeatures
    }

    // set the value of eStructuralFeatures
    setEStructuralFeatures(newEStructuralFeatures: EList<EStructuralFeature>) {
        const l = this.getEStructuralFeatures()
        l.clear()
        l.addAll(newEStructuralFeatures)
    }

    // get the value of eSuperTypes
    getESuperTypes(): EList<EClass> {
        if (this._eSuperTypes == null) {
            this._eSuperTypes = this.initESuperTypes()
        }
        return this._eSuperTypes
    }

    // set the value of eSuperTypes
    setESuperTypes(newESuperTypes: EList<EClass>) {
        const l = this.getESuperTypes()
        l.clear()
        l.addAll(newESuperTypes)
    }

    // get the value of abstract
    isAbstract(): boolean {
        return this._isAbstract
    }

    // set the value of abstract
    setAbstract(newAbstract: boolean): void {
        const oldAbstract = this._isAbstract
        this._isAbstract = newAbstract
        if (this.eNotificationRequired()) {
            this.eNotify(
                new Notification(this, EventType.SET, EcoreConstants.ECLASS__ABSTRACT, oldAbstract, newAbstract)
            )
        }
    }

    // get the value of interface
    isInterface(): boolean {
        return this._isInterface
    }

    // set the value of interface
    setInterface(newInterface: boolean): void {
        const oldInterface = this._isInterface
        this._isInterface = newInterface
        if (this.eNotificationRequired()) {
            this.eNotify(
                new Notification(this, EventType.SET, EcoreConstants.ECLASS__INTERFACE, oldInterface, newInterface)
            )
        }
    }

    // getEOperation default implementation
    getEOperation(operationID: number): EOperation {
        throw new Error("getEOperation not implemented")
    }

    // getEStructuralFeature default implementation
    getEStructuralFeature(featureID: number): EStructuralFeature {
        throw new Error("getEStructuralFeature not implemented")
    }

    // getEStructuralFeatureFromName default implementation
    getEStructuralFeatureFromName(featureName: string): EStructuralFeature {
        throw new Error("getEStructuralFeatureFromName not implemented")
    }

    // getFeatureCount default implementation
    getFeatureCount(): number {
        throw new Error("getFeatureCount not implemented")
    }

    // getFeatureID default implementation
    getFeatureID(feature: EStructuralFeature): number {
        throw new Error("getFeatureID not implemented")
    }

    // getFeatureType default implementation
    getFeatureType(feature: EStructuralFeature): EClassifier {
        throw new Error("getFeatureType not implemented")
    }

    // getOperationCount default implementation
    getOperationCount(): number {
        throw new Error("getOperationCount not implemented")
    }

    // getOperationID default implementation
    getOperationID(operation: EOperation): number {
        throw new Error("getOperationID not implemented")
    }

    // getOverride default implementation
    getOverride(operation: EOperation): EOperation {
        throw new Error("getOverride not implemented")
    }

    // isSuperTypeOf default implementation
    isSuperTypeOf(someClass: EClass): boolean {
        throw new Error("isSuperTypeOf not implemented")
    }

    protected initEAllAttributes(): void {
        this._eAllAttributes = new BasicEObjectList<EAttribute>(
            this,
            EcoreConstants.ECLASS__EALL_ATTRIBUTES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEAllContainments(): void {
        this._eAllContainments = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EALL_CONTAINMENTS,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEAllCrossReferences(): void {
        this._eAllCrossReferences = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EALL_CROSS_REFERENCES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEAllOperations(): void {
        this._eAllOperations = new BasicEObjectList<EOperation>(
            this,
            EcoreConstants.ECLASS__EALL_OPERATIONS,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEAllReferences(): void {
        this._eAllReferences = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EALL_REFERENCES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEAllStructuralFeatures(): void {
        this._eAllStructuralFeatures = new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__EALL_STRUCTURAL_FEATURES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEAllSuperTypes(): void {
        this._eAllSuperTypes = new BasicEObjectList<EClass>(
            this,
            EcoreConstants.ECLASS__EALL_SUPER_TYPES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEAttributes(): void {
        this._eAttributes = new BasicEObjectList<EAttribute>(
            this,
            EcoreConstants.ECLASS__EATTRIBUTES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEContainmentFeatures(): void {
        this._eContainmentFeatures = new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__ECONTAINMENT_FEATURES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initECrossReferenceFeatures(): void {
        this._eCrossReferenceFeatures = new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__ECROSS_REFERENCE_FEATURES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEIDAttribute(): void {
        throw new Error("initEIDAttribute not implemented")
    }
    protected initEOperations(): EList<EOperation> {
        return new BasicEObjectList<EOperation>(
            this,
            EcoreConstants.ECLASS__EOPERATIONS,
            EcoreConstants.EOPERATION__ECONTAINING_CLASS,
            true,
            true,
            true,
            false,
            false
        )
    }
    protected initEReferences(): void {
        this._eReferences = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EREFERENCES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }
    protected initEStructuralFeatures(): EList<EStructuralFeature> {
        return new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES,
            EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS,
            true,
            true,
            true,
            false,
            false
        )
    }
    protected initESuperTypes(): EList<EClass> {
        return new BasicEObjectList<EClass>(
            this,
            EcoreConstants.ECLASS__ESUPER_TYPES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                return this.isAbstract()
            }
            case EcoreConstants.ECLASS__EALL_ATTRIBUTES: {
                const list = this.getEAllAttributes()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EALL_CONTAINMENTS: {
                const list = this.getEAllContainments()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EALL_CROSS_REFERENCES: {
                const list = this.getEAllCrossReferences()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EALL_OPERATIONS: {
                const list = this.getEAllOperations()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EALL_REFERENCES: {
                const list = this.getEAllReferences()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EALL_STRUCTURAL_FEATURES: {
                const list = this.getEAllStructuralFeatures()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EALL_SUPER_TYPES: {
                const list = this.getEAllSuperTypes()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EATTRIBUTES: {
                const list = this.getEAttributes()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__ECONTAINMENT_FEATURES: {
                const list = this.getEContainmentFeatures()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__ECROSS_REFERENCE_FEATURES: {
                const list = this.getECrossReferenceFeatures()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__EID_ATTRIBUTE: {
                return this.getEIDAttribute()
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                return this.getEOperations()
            }
            case EcoreConstants.ECLASS__EREFERENCES: {
                const list = this.getEReferences()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                return this.getEStructuralFeatures()
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                const list = this.getESuperTypes()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                return this.isInterface()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    async eGetFromIDAsync(featureID: number, resolve: boolean): Promise<any> {
        return this.eGetFromID(featureID, resolve)
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                this.setAbstract(newValue as boolean)
                break
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                const list = this.getEOperations()
                list.clear()
                list.addAll(newValue as EList<EOperation>)
                break
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                const list = this.getEStructuralFeatures()
                list.clear()
                list.addAll(newValue as EList<EStructuralFeature>)
                break
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                const list = this.getESuperTypes()
                list.clear()
                list.addAll(newValue as EList<EClass>)
                break
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                this.setInterface(newValue as boolean)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                this.setAbstract(false)
                break
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                this.getEOperations().clear()
                break
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                this.getEStructuralFeatures().clear()
                break
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                this.getESuperTypes().clear()
                break
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                this.setInterface(false)
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                return this._isAbstract != false
            }
            case EcoreConstants.ECLASS__EALL_ATTRIBUTES: {
                return this._eAllAttributes && !this._eAllAttributes.isEmpty()
            }
            case EcoreConstants.ECLASS__EALL_CONTAINMENTS: {
                return this._eAllContainments && !this._eAllContainments.isEmpty()
            }
            case EcoreConstants.ECLASS__EALL_CROSS_REFERENCES: {
                return this._eAllCrossReferences && !this._eAllCrossReferences.isEmpty()
            }
            case EcoreConstants.ECLASS__EALL_OPERATIONS: {
                return this._eAllOperations && !this._eAllOperations.isEmpty()
            }
            case EcoreConstants.ECLASS__EALL_REFERENCES: {
                return this._eAllReferences && !this._eAllReferences.isEmpty()
            }
            case EcoreConstants.ECLASS__EALL_STRUCTURAL_FEATURES: {
                return this._eAllStructuralFeatures && !this._eAllStructuralFeatures.isEmpty()
            }
            case EcoreConstants.ECLASS__EALL_SUPER_TYPES: {
                return this._eAllSuperTypes && !this._eAllSuperTypes.isEmpty()
            }
            case EcoreConstants.ECLASS__EATTRIBUTES: {
                return this._eAttributes && !this._eAttributes.isEmpty()
            }
            case EcoreConstants.ECLASS__ECONTAINMENT_FEATURES: {
                return this._eContainmentFeatures && !this._eContainmentFeatures.isEmpty()
            }
            case EcoreConstants.ECLASS__ECROSS_REFERENCE_FEATURES: {
                return this._eCrossReferenceFeatures && !this._eCrossReferenceFeatures.isEmpty()
            }
            case EcoreConstants.ECLASS__EID_ATTRIBUTE: {
                return this._eIDAttribute != null
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                return this._eOperations && !this._eOperations.isEmpty()
            }
            case EcoreConstants.ECLASS__EREFERENCES: {
                return this._eReferences && !this._eReferences.isEmpty()
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                return this._eStructuralFeatures && !this._eStructuralFeatures.isEmpty()
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                return this._eSuperTypes && !this._eSuperTypes.isEmpty()
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                return this._isInterface != false
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eInvokeFromID(operationID: number, args: EList<any>): any {
        switch (operationID) {
            case EcoreConstants.ECLASS__GET_EOPERATION_EINT: {
                return this.getEOperation(args.get(0) as number)
            }
            case EcoreConstants.ECLASS__GET_ESTRUCTURAL_FEATURE_EINT: {
                return this.getEStructuralFeature(args.get(0) as number)
            }
            case EcoreConstants.ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING: {
                return this.getEStructuralFeatureFromName(args.get(0) as string)
            }
            case EcoreConstants.ECLASS__GET_FEATURE_COUNT: {
                return this.getFeatureCount()
            }
            case EcoreConstants.ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE: {
                return this.getFeatureID(args.get(0) as EStructuralFeature)
            }
            case EcoreConstants.ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE: {
                return this.getFeatureType(args.get(0) as EStructuralFeature)
            }
            case EcoreConstants.ECLASS__GET_OPERATION_COUNT: {
                return this.getOperationCount()
            }
            case EcoreConstants.ECLASS__GET_OPERATION_ID_EOPERATION: {
                return this.getOperationID(args.get(0) as EOperation)
            }
            case EcoreConstants.ECLASS__GET_OVERRIDE_EOPERATION: {
                return this.getOverride(args.get(0) as EOperation)
            }
            case EcoreConstants.ECLASS__IS_SUPER_TYPE_OF_ECLASS: {
                return this.isSuperTypeOf(args.get(0) as EClass)
            }
            default: {
                return super.eInvokeFromID(operationID, args)
            }
        }
    }

    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASS__EOPERATIONS: {
                const list = this.getEOperations() as ENotifyingList<EOperation>
                const end = otherEnd as EOperation
                return list.addWithNotification(end, notifications)
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                const list = this.getEStructuralFeatures() as ENotifyingList<EStructuralFeature>
                const end = otherEnd as EStructuralFeature
                return list.addWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASS__EOPERATIONS: {
                const list = this.getEOperations() as ENotifyingList<EOperation>
                const end = otherEnd as EOperation
                return list.removeWithNotification(end, notifications)
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                const list = this.getEStructuralFeatures() as ENotifyingList<EStructuralFeature>
                const end = otherEnd as EStructuralFeature
                return list.removeWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
