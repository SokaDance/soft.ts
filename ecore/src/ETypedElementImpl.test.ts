// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import { anything, capture, instance, mock, verify, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAdapter,
    EClassifier,
    EObjectInternal,
    EResource,
    EResourceSet,
    ETypedElementImpl,
    EcoreConstants,
    EventType,
    URI,
    getEcorePackage
} from "./internal.js"

interface EClassifierInternal extends EClassifier, EObjectInternal {}

describe("ETypedElementImpl", () => {
    test("eStaticClass", () => {
        const o = new ETypedElementImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getETypedElement())
    })

    test("getEType", () => {
        const o = new ETypedElementImpl()

        // get default value
        expect(o.getEType()).toBeNull()

        // initialize object with a mock value
        const mockValue = mock<EClassifierInternal>()
        const value = instance(mockValue)
        o.setEType(value)

        // events
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set object resource
        const mockResourceSet = mock<EResourceSet>()
        const resourceSet = instance(mockResourceSet)
        const mockResource = mock<EResource>()
        const resource = instance(mockResource)
        o.eSetInternalResource(resource)

        // get non resolved value
        when(mockValue.eIsProxy()).thenReturn(false)
        expect(o.getEType()).toBe(value)
        verify(mockValue.eIsProxy()).once()

        // get a resolved value
        const mockURI = new URI("test:///uri")
        const mockResolved = mock<EClassifierInternal>()
        const resolved = instance(mockResolved)
        when(mockResolved.eProxyURI()).thenReturn(null)
        when(mockResource.eResourceSet()).thenReturn(resourceSet)
        when(mockResourceSet.getEObject(mockURI, true)).thenReturn(resolved)
        when(mockValue.eIsProxy()).thenReturn(true)
        when(mockValue.eProxyURI()).thenReturn(mockURI)
        expect(o.getEType()).toBe(resolved)
    })

    test("setEType", () => {
        const o = new ETypedElementImpl()
        const mockValue = mock<EClassifierInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setEType(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("unsetEType", () => {
        const o = new ETypedElementImpl()

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // unset
        o.unSetEType()

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getEventType()).toBe(EventType.UNSET)
        expect(notification.getFeatureID()).toBe(EcoreConstants.ETYPED_ELEMENT__ETYPE)
        expect(o.getEType()).toBeNull()
    })

    test("getMany", () => {
        const o = new ETypedElementImpl()
        expect(() => o.isMany()).toThrow(Error)
    })

    test("getOrdered", () => {
        const o = new ETypedElementImpl()
        // get default value
        expect(o.isOrdered()).toBe(true)
    })

    test("setOrdered", () => {
        const o = new ETypedElementImpl()
        const value = true

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setOrdered(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(true)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getRequired", () => {
        const o = new ETypedElementImpl()
        expect(() => o.isRequired()).toThrow(Error)
    })

    test("getUnique", () => {
        const o = new ETypedElementImpl()
        // get default value
        expect(o.isUnique()).toBe(true)
    })

    test("setUnique", () => {
        const o = new ETypedElementImpl()
        const value = true

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setUnique(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(true)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getLowerBound", () => {
        const o = new ETypedElementImpl()
        // get default value
        expect(o.getLowerBound()).toBe(0)
    })

    test("setLowerBound", () => {
        const o = new ETypedElementImpl()
        const value = 45

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setLowerBound(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(0)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getUpperBound", () => {
        const o = new ETypedElementImpl()
        // get default value
        expect(o.getUpperBound()).toBe(1)
    })

    test("setUpperBound", () => {
        const o = new ETypedElementImpl()
        const value = 45

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setUpperBound(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(1)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("eGetFromID", () => {
        const o = new ETypedElementImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__ETYPE, true)).toStrictEqual(o.getEType())
        expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__LOWER_BOUND, true)).toStrictEqual(o.getLowerBound())
        expect(() => o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__MANY, true)).toThrow(Error)
        expect(() => o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__MANY, false)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__ORDERED, true)).toStrictEqual(o.isOrdered())
        expect(() => o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__REQUIRED, true)).toThrow(Error)
        expect(() => o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__REQUIRED, false)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__UNIQUE, true)).toStrictEqual(o.isUnique())
        expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__UPPER_BOUND, true)).toStrictEqual(o.getUpperBound())
    })

    test("eSetFromID", () => {
        const o = new ETypedElementImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            const mockValue = mock<EClassifierInternal>()
            const value = instance(mockValue)
            o.eSetFromID(EcoreConstants.ETYPED_ELEMENT__ETYPE, value)
            expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__ETYPE, false)).toBe(value)
        }
        {
            const value = 45
            o.eSetFromID(EcoreConstants.ETYPED_ELEMENT__LOWER_BOUND, value)
            expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__LOWER_BOUND, false)).toBe(value)
        }
        {
            const value = true
            o.eSetFromID(EcoreConstants.ETYPED_ELEMENT__ORDERED, value)
            expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__ORDERED, false)).toBe(value)
        }
        {
            const value = true
            o.eSetFromID(EcoreConstants.ETYPED_ELEMENT__UNIQUE, value)
            expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__UNIQUE, false)).toBe(value)
        }
        {
            const value = 45
            o.eSetFromID(EcoreConstants.ETYPED_ELEMENT__UPPER_BOUND, value)
            expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__UPPER_BOUND, false)).toBe(value)
        }
    })

    test("eIsSetFromID", () => {
        const o = new ETypedElementImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.ETYPED_ELEMENT__ETYPE)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ETYPED_ELEMENT__LOWER_BOUND)).toBeFalsy()
        expect(() => o.eIsSetFromID(EcoreConstants.ETYPED_ELEMENT__MANY)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.ETYPED_ELEMENT__ORDERED)).toBeFalsy()
        expect(() => o.eIsSetFromID(EcoreConstants.ETYPED_ELEMENT__REQUIRED)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.ETYPED_ELEMENT__UNIQUE)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ETYPED_ELEMENT__UPPER_BOUND)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new ETypedElementImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.ETYPED_ELEMENT__ETYPE)
            expect(o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__ETYPE, false)).toBeNull()
        }
        {
            o.eUnsetFromID(EcoreConstants.ETYPED_ELEMENT__LOWER_BOUND)
            const v = o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__LOWER_BOUND, false)
            expect(v).toBe(0)
        }
        {
            o.eUnsetFromID(EcoreConstants.ETYPED_ELEMENT__ORDERED)
            const v = o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__ORDERED, false)
            expect(v).toBe(true)
        }
        {
            o.eUnsetFromID(EcoreConstants.ETYPED_ELEMENT__UNIQUE)
            const v = o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__UNIQUE, false)
            expect(v).toBe(true)
        }
        {
            o.eUnsetFromID(EcoreConstants.ETYPED_ELEMENT__UPPER_BOUND)
            const v = o.eGetFromID(EcoreConstants.ETYPED_ELEMENT__UPPER_BOUND, false)
            expect(v).toBe(1)
        }
    })
})
