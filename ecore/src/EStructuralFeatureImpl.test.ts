// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import { anything, capture, instance, mock, reset, verify, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAdapter,
    EClass,
    ENotificationChain,
    EObject,
    EObjectInternal,
    EStructuralFeatureImpl,
    EcoreConstants,
    getEcorePackage
} from "./internal.js"

interface EClassInternal extends EClass, EObjectInternal {}

describe("EStructuralFeatureImpl", () => {
    test("eStaticClass", () => {
        const o = new EStructuralFeatureImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getEStructuralFeature())
    })

    test("getDefaultValue", () => {
        const o = new EStructuralFeatureImpl()
        expect(() => o.getDefaultValue()).toThrow(Error)
    })

    test("setDefaultValue", () => {
        const o = new EStructuralFeatureImpl()
        const value = null
        expect(() => o.setDefaultValue(value)).toThrow(Error)
    })

    test("getDefaultValueLiteral", () => {
        const o = new EStructuralFeatureImpl()
        // get default value
        expect(o.getDefaultValueLiteral()).toBe("")
    })

    test("setDefaultValueLiteral", () => {
        const o = new EStructuralFeatureImpl()
        const value = "Test String"

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setDefaultValueLiteral(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe("")
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getEContainingClass", () => {
        // default
        const o = new EStructuralFeatureImpl()
        expect(o.getEContainingClass()).toBeNull()

        // set a mock container
        const mockContainer = mock<EObject>()
        const container = instance(mockContainer)
        o.eSetInternalContainer(container, EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS)

        // no proxy
        when(mockContainer.eIsProxy()).thenReturn(false)
        expect(o.getEContainingClass()).toBe(container)
        verify(mockContainer.eIsProxy()).once()
    })

    test("getFeatureID", () => {
        const o = new EStructuralFeatureImpl()
        // get default value
        expect(o.getFeatureID()).toBe(-1)
    })

    test("setFeatureID", () => {
        const o = new EStructuralFeatureImpl()
        const value = 45

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setFeatureID(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(-1)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getChangeable", () => {
        const o = new EStructuralFeatureImpl()
        // get default value
        expect(o.isChangeable()).toBe(true)
    })

    test("setChangeable", () => {
        const o = new EStructuralFeatureImpl()
        const value = true

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setChangeable(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(true)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getDerived", () => {
        const o = new EStructuralFeatureImpl()
        // get default value
        expect(o.isDerived()).toBe(false)
    })

    test("setDerived", () => {
        const o = new EStructuralFeatureImpl()
        const value = true

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setDerived(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(false)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getTransient", () => {
        const o = new EStructuralFeatureImpl()
        // get default value
        expect(o.isTransient()).toBe(false)
    })

    test("setTransient", () => {
        const o = new EStructuralFeatureImpl()
        const value = true

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setTransient(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(false)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getUnsettable", () => {
        const o = new EStructuralFeatureImpl()
        // get default value
        expect(o.isUnsettable()).toBe(false)
    })

    test("setUnsettable", () => {
        const o = new EStructuralFeatureImpl()
        const value = true

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setUnsettable(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(false)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getVolatile", () => {
        const o = new EStructuralFeatureImpl()
        // get default value
        expect(o.isVolatile()).toBe(false)
    })

    test("setVolatile", () => {
        const o = new EStructuralFeatureImpl()
        const value = true

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setVolatile(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(false)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getContainerClass", () => {
        const o = new EStructuralFeatureImpl()
        expect(() => o.getContainerClass()).toThrow(Error)
    })

    test("eGetFromID", () => {
        const o = new EStructuralFeatureImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE, true)).toStrictEqual(o.isChangeable())
        expect(() => o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE, true)).toThrow(Error)
        expect(() => o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE, false)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, true)).toStrictEqual(o.getDefaultValueLiteral())
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED, true)).toStrictEqual(o.isDerived())
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, true)).toStrictEqual(o.getEContainingClass())
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID, true)).toStrictEqual(o.getFeatureID())
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT, true)).toStrictEqual(o.isTransient())
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE, true)).toStrictEqual(o.isUnsettable())
        expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE, true)).toStrictEqual(o.isVolatile())
    })

    test("eSetFromID", () => {
        const o = new EStructuralFeatureImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            const value = true
            o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE, value)
            expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE, false)).toBe(value)
        }
        expect(() => o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE, null)).toThrow(Error)
        {
            const value = "Test String"
            o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, value)
            expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false)).toBe(value)
        }
        {
            const value = true
            o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED, value)
            expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED, false)).toBe(value)
        }
        {
            const value = 45
            o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID, value)
            expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID, false)).toBe(value)
        }
        {
            const value = true
            o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT, value)
            expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT, false)).toBe(value)
        }
        {
            const value = true
            o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE, value)
            expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE, false)).toBe(value)
        }
        {
            const value = true
            o.eSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE, value)
            expect(o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE, false)).toBe(value)
        }
    })

    test("eIsSetFromID", () => {
        const o = new EStructuralFeatureImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE)).toBeFalsy()
        expect(() => o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new EStructuralFeatureImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE)
            const v = o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE, false)
            expect(v).toBe(true)
        }
        {
            expect(() => o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE)).toThrow(Error)
        }
        {
            o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL)
            const v = o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, false)
            expect(v).toBe("")
        }
        {
            o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED)
            const v = o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED, false)
            expect(v).toBe(false)
        }
        {
            o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID)
            const v = o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID, false)
            expect(v).toBe(-1)
        }
        {
            o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT)
            const v = o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT, false)
            expect(v).toBe(false)
        }
        {
            o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE)
            const v = o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE, false)
            expect(v).toBe(false)
        }
        {
            o.eUnsetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE)
            const v = o.eGetFromID(EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE, false)
            expect(v).toBe(false)
        }
    })

    test("eInvokeFromID", () => {
        const o = new EStructuralFeatureImpl()
        expect(() => o.eInvokeFromID(-1, null)).toThrow(Error)
        expect(() => o.eInvokeFromID(EcoreConstants.ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS, null)).toThrow(Error)
    })

    test("eBasicInverseAdd", () => {
        const o = new EStructuralFeatureImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseAdd(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EClassInternal>()
            const value = instance(mockValue)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eIsProxy()).thenReturn(false)
            o.eBasicInverseAdd(value, EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, null)
            expect(o.getEContainingClass()).toBe(value)

            reset(mockValue)
            const mockOther = mock<EClassInternal>()
            const other = instance(mockOther)
            when(mockOther.eResource()).thenReturn(null)
            when(mockOther.eIsProxy()).thenReturn(false)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eInverseRemove(o, EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES, null)).thenReturn(null)
            o.eBasicInverseAdd(other, EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, null)
            expect(o.getEContainingClass()).toBe(other)
        }
    })

    test("eBasicInverseRemove", () => {
        const o = new EStructuralFeatureImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EClassInternal>()
            const value = instance(mockValue)
            o.eBasicInverseRemove(value, EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, null)
        }
    })
})
