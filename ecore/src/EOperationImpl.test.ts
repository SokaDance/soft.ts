// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import deepEqual from "deep-equal"
import { anything, capture, instance, mock, reset, verify, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAdapter,
    EClass,
    EClassifier,
    EList,
    ENotificationChain,
    EObject,
    EObjectInternal,
    EObjectList,
    EOperationImpl,
    EParameter,
    EcoreConstants,
    ImmutableEList,
    getEcorePackage
} from "./internal.js"

interface EClassInternal extends EClass, EObjectInternal {}
interface EClassifierInternal extends EClassifier, EObjectInternal {}
interface EParameterInternal extends EParameter, EObjectInternal {}

describe("EOperationImpl", () => {
    test("eStaticClass", () => {
        const o = new EOperationImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getEOperation())
    })

    test("getEContainingClass", () => {
        // default
        const o = new EOperationImpl()
        expect(o.getEContainingClass()).toBeNull()

        // set a mock container
        const mockContainer = mock<EObject>()
        const container = instance(mockContainer)
        o.eSetInternalContainer(container, EcoreConstants.EOPERATION__ECONTAINING_CLASS)

        // no proxy
        when(mockContainer.eIsProxy()).thenReturn(false)
        expect(o.getEContainingClass()).toBe(container)
        verify(mockContainer.eIsProxy()).once()
    })

    test("getEExceptions", () => {
        const o = new EOperationImpl()
        expect(o.getEExceptions()).not.toBeNull()
    })

    test("unsetEExceptions", () => {
        const o = new EOperationImpl()
        o.unSetEExceptions()
        expect(o.getEExceptions().isEmpty()).toBeTruthy()
    })

    test("getEParameters", () => {
        const o = new EOperationImpl()
        expect(o.getEParameters()).not.toBeNull()
    })

    test("getOperationID", () => {
        const o = new EOperationImpl()
        // get default value
        expect(o.getOperationID()).toBe(-1)
    })

    test("setOperationID", () => {
        const o = new EOperationImpl()
        const value = 45

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setOperationID(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe(-1)
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("isOverrideOf", () => {
        const o = new EOperationImpl()
        expect(() => o.isOverrideOf(null)).toThrow(Error)
    })

    test("eGetFromID", () => {
        const o = new EOperationImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.EOPERATION__ECONTAINING_CLASS, true)).toStrictEqual(o.getEContainingClass())
        expect(o.eGetFromID(EcoreConstants.EOPERATION__EEXCEPTIONS, true)).toStrictEqual(o.getEExceptions())
        expect(
            deepEqual(
                o.eGetFromID(EcoreConstants.EOPERATION__EEXCEPTIONS, false),
                (o.getEExceptions() as EObjectList<EClassifier>).getUnResolvedList()
            )
        ).toBeTruthy()
        expect(o.eGetFromID(EcoreConstants.EOPERATION__EPARAMETERS, true)).toStrictEqual(o.getEParameters())
        expect(
            deepEqual(
                o.eGetFromID(EcoreConstants.EOPERATION__EPARAMETERS, false),
                (o.getEParameters() as EObjectList<EParameter>).getUnResolvedList()
            )
        ).toBeTruthy()
        expect(o.eGetFromID(EcoreConstants.EOPERATION__OPERATION_ID, true)).toStrictEqual(o.getOperationID())
    })

    test("eSetFromID", () => {
        const o = new EOperationImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            // list with a value
            const mockValue = mock<EClassifierInternal>()
            const value = instance(mockValue)
            const l = new ImmutableEList<EClassifier>([value])
            when(mockValue.eIsProxy()).thenReturn(false)

            // set list with new contents
            o.eSetFromID(EcoreConstants.EOPERATION__EEXCEPTIONS, l)
            // checks
            expect(o.getEExceptions().size()).toBe(1)
            expect(o.getEExceptions().get(0)).toBe(value)
        }

        {
            // list with a value
            const mockValue = mock<EParameterInternal>()
            const value = instance(mockValue)
            const l = new ImmutableEList<EParameter>([value])
            when(mockValue.eInverseAdd(o, EcoreConstants.EPARAMETER__EOPERATION, anything())).thenReturn(null)

            // set list with new contents
            o.eSetFromID(EcoreConstants.EOPERATION__EPARAMETERS, l)
            // checks
            expect(o.getEParameters().size()).toBe(1)
            expect(o.getEParameters().get(0)).toBe(value)
            verify(mockValue.eInverseAdd(o, EcoreConstants.EPARAMETER__EOPERATION, anything())).once()
        }

        {
            const value = 45
            o.eSetFromID(EcoreConstants.EOPERATION__OPERATION_ID, value)
            expect(o.eGetFromID(EcoreConstants.EOPERATION__OPERATION_ID, false)).toBe(value)
        }
    })

    test("eIsSetFromID", () => {
        const o = new EOperationImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.EOPERATION__ECONTAINING_CLASS)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EOPERATION__EEXCEPTIONS)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EOPERATION__EPARAMETERS)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EOPERATION__OPERATION_ID)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new EOperationImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.EOPERATION__EEXCEPTIONS)
            const v = o.eGetFromID(EcoreConstants.EOPERATION__EEXCEPTIONS, false)
            expect(v).not.toBeNull()
            const l = v as EList<EClassifier>
            expect(l.isEmpty()).toBeTruthy()
        }
        {
            o.eUnsetFromID(EcoreConstants.EOPERATION__EPARAMETERS)
            const v = o.eGetFromID(EcoreConstants.EOPERATION__EPARAMETERS, false)
            expect(v).not.toBeNull()
            const l = v as EList<EParameter>
            expect(l.isEmpty()).toBeTruthy()
        }
        {
            o.eUnsetFromID(EcoreConstants.EOPERATION__OPERATION_ID)
            const v = o.eGetFromID(EcoreConstants.EOPERATION__OPERATION_ID, false)
            expect(v).toBe(-1)
        }
    })

    test("eInvokeFromID", () => {
        const o = new EOperationImpl()
        expect(() => o.eInvokeFromID(-1, null)).toThrow(Error)
        expect(() => o.eInvokeFromID(EcoreConstants.EOPERATION__IS_OVERRIDE_OF_EOPERATION, null)).toThrow(Error)
    })

    test("eBasicInverseAdd", () => {
        const o = new EOperationImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseAdd(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EClassInternal>()
            const value = instance(mockValue)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eIsProxy()).thenReturn(false)
            o.eBasicInverseAdd(value, EcoreConstants.EOPERATION__ECONTAINING_CLASS, null)
            expect(o.getEContainingClass()).toBe(value)

            reset(mockValue)
            const mockOther = mock<EClassInternal>()
            const other = instance(mockOther)
            when(mockOther.eResource()).thenReturn(null)
            when(mockOther.eIsProxy()).thenReturn(false)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eInverseRemove(o, EcoreConstants.ECLASS__EOPERATIONS, null)).thenReturn(null)
            o.eBasicInverseAdd(other, EcoreConstants.EOPERATION__ECONTAINING_CLASS, null)
            expect(o.getEContainingClass()).toBe(other)
        }
        {
            const mockValue = mock<EParameterInternal>()
            const value = instance(mockValue)
            o.eBasicInverseAdd(value, EcoreConstants.EOPERATION__EPARAMETERS, null)
            expect(o.getEParameters().contains(value)).toBeTruthy()
        }
    })

    test("eBasicInverseRemove", () => {
        const o = new EOperationImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EClassInternal>()
            const value = instance(mockValue)
            o.eBasicInverseRemove(value, EcoreConstants.EOPERATION__ECONTAINING_CLASS, null)
        }
        {
            // initialize list with a mock object
            const mockValue = mock<EParameterInternal>()
            const value = instance(mockValue)
            when(mockValue.eInverseAdd(o, EcoreConstants.EPARAMETER__EOPERATION, anything())).thenReturn(null)

            o.getEParameters().add(value)

            // basic inverse remove
            o.eBasicInverseRemove(value, EcoreConstants.EOPERATION__EPARAMETERS, null)

            // check it was removed
            expect(o.getEParameters().contains(value)).toBeFalsy()
        }
    })
})
