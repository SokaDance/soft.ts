// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group                                                 
//                                                                              
// This Source Code Form is subject to the terms of the Mozilla Public          
// License, v. 2.0. If a copy of the MPL was not distributed with this          
// file, You can obtain one at https://mozilla.org/MPL/2.0/.                    
//                                                                              
// *****************************************************************************


import {
    EClass,
    EClassifier,
    EList,
    ENamedElement,
    ENamedElementImpl,
    ENotification,
    ENotificationChain,
    ENotifyingList,
    EOPPOSITE_FEATURE_BASE,
    EObject,
    EObjectInternal,
    EPackage,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage,
    isEObjectInternal,
    isEObjectList,
} from "./internal.js"


export class EClassifierImpl extends ENamedElementImpl implements EClassifier {
    protected _classifierID: number
    protected _instanceClassName: string
    protected _instanceClass: any
    

    constructor() {
        super()
        this._classifierID = -1
        this._instanceClass = null
        this._instanceClassName = ""
        
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEClassifierClass()
    }

    
    // get the value of classifierID
    getClassifierID(): number {
        if (this._classifierID == -1) {
            this._classifierID = this.initClassifierID()
        }
        return this._classifierID
    
    }
    
    // set the value of classifierID
    setClassifierID(newClassifierID : number ): void {
        let oldClassifierID = this._classifierID
        this._classifierID = newClassifierID
        if (this.eNotificationRequired()) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ECLASSIFIER__CLASSIFIER_ID, oldClassifierID, newClassifierID))
        }
    
    }
    
    
    // get the value of defaultValue
    getDefaultValue(): any {
        throw new Error("get defaultValue not implemented")
    
    }
    
    
    // get the value of ePackage
    getEPackage(): EPackage {
        if (this.eContainerFeatureID() == EcoreConstants.ECLASSIFIER__EPACKAGE) {
            return this.eContainer() as EPackage
        }
        return null
    
    }
    
    
    // get the value of instanceClass
    getInstanceClass(): any {
        return this._instanceClass
    
    }
    
    // set the value of instanceClass
    setInstanceClass(newInstanceClass : any ): void {
        let oldInstanceClass = this._instanceClass
        this._instanceClass = newInstanceClass
        if (this.eNotificationRequired()) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ECLASSIFIER__INSTANCE_CLASS, oldInstanceClass, newInstanceClass))
        }
    
    }
    
    
    // get the value of instanceClassName
    getInstanceClassName(): string {
        return this._instanceClassName
    
    }
    
    // set the value of instanceClassName
    setInstanceClassName(newInstanceClassName : string ): void {
        let oldInstanceClassName = this._instanceClassName
        this._instanceClassName = newInstanceClassName
        if (this.eNotificationRequired()) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME, oldInstanceClassName, newInstanceClassName))
        }
    
    }
    
    
    // get the value of instanceTypeName
    getInstanceTypeName(): string {
        throw new Error("get instanceTypeName not implemented")
    
    }
    
    // set the value of instanceTypeName
    setInstanceTypeName(newInstanceTypeName : string ): void {
        throw new Error("set instanceTypeName not implemented")
    
    }
    
    

    // isInstance default implementation
    isInstance(object: any): boolean {
        throw new Error("isInstance not implemented")
    }
    
    

    protected initClassifierID(): number {
        return -1
    }
    

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
                return this.getClassifierID()
            }
            case EcoreConstants.ECLASSIFIER__DEFAULT_VALUE: {
                return this.getDefaultValue()
            }
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                return this.getEPackage()
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
                return this.getInstanceClass()
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
                return this.getInstanceClassName()
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
                return this.getInstanceTypeName()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }
    
    
    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
    			this.setClassifierID(newValue as number)
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
    			this.setInstanceClass(newValue as any)
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
    			this.setInstanceClassName(newValue as string)
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
    			this.setInstanceTypeName(newValue as string)
                break
            }
            default: {
            	super.eSetFromID(featureID, newValue)
            }
        }
    }
    
    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
    		this.setClassifierID(-1)
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
    		this.setInstanceClass(null)
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
    		this.setInstanceClassName("")
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
    		this.setInstanceTypeName("")
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }
    
    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
                return this._classifierID != -1
            }
            case EcoreConstants.ECLASSIFIER__DEFAULT_VALUE: {
                return this.getDefaultValue() != null
            }
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                return this.getEPackage() != null
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
                return this._instanceClass != null
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
                return this._instanceClassName != ""
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
                return this.getInstanceTypeName() != ""
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
    
    eInvokeFromID(operationID: number , args: EList<any>): any {
        switch (operationID) {
            case EcoreConstants.ECLASSIFIER__IS_INSTANCE_EJAVAOBJECT: {
                return this.isInstance(args.get(0)) 
            }
            default: {
                return super.eInvokeFromID(operationID,args)
            }
        }
    }
    
    
    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.eBasicSetContainer(otherEnd, EcoreConstants.ECLASSIFIER__EPACKAGE, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }
    
    
    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                return this.eBasicSetContainer(null, EcoreConstants.ECLASSIFIER__EPACKAGE, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
    
    
}

