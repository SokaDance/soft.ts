// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group                                                 
//                                                                              
// This Source Code Form is subject to the terms of the Mozilla Public          
// License, v. 2.0. If a copy of the MPL was not distributed with this          
// file, You can obtain one at https://mozilla.org/MPL/2.0/.                    
//                                                                              
// *****************************************************************************


import {
    EClass,
    EList,
    ENotification,
    ENotificationChain,
    ENotifyingList,
    EOPPOSITE_FEATURE_BASE,
    EObject,
    EObjectInternal,
    EStructuralFeature,
    ETypedElement,
    ETypedElementExt,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage,
    isEObjectInternal,
    isEObjectList,
} from "./internal.js"


export class EStructuralFeatureImpl extends ETypedElementExt implements EStructuralFeature {
    protected _isTransient: boolean
    protected _isVolatile: boolean
    protected _isChangeable: boolean
    protected _isDerived: boolean
    protected _featureID: number
    protected _defaultValueLiteral: string
    protected _isUnsettable: boolean
    

    constructor() {
        super()
        this._defaultValueLiteral = ""
        this._featureID = -1
        this._isChangeable = true
        this._isDerived = false
        this._isTransient = false
        this._isUnsettable = false
        this._isVolatile = false
        
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEStructuralFeature()
    }

    
    // get the value of defaultValue
    getDefaultValue(): any {
        throw new Error("get defaultValue not implemented")
    
    }
    
    // set the value of defaultValue
    setDefaultValue(newDefaultValue : any ): void {
        throw new Error("set defaultValue not implemented")
    
    }
    
    
    // get the value of defaultValueLiteral
    getDefaultValueLiteral(): string {
        return this._defaultValueLiteral
    
    }
    
    // set the value of defaultValueLiteral
    setDefaultValueLiteral(newDefaultValueLiteral : string ): void {
        let oldDefaultValueLiteral = this._defaultValueLiteral
        this._defaultValueLiteral = newDefaultValueLiteral
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL, oldDefaultValueLiteral, newDefaultValueLiteral))
        }
    
    }
    
    
    // get the value of eContainingClass
    getEContainingClass(): EClass {
        if (this.eContainerFeatureID() == EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS) {
            return this.eContainer() as EClass
        }
        return null
    
    }
    
    
    // get the value of featureID
    getFeatureID(): number {
        return this._featureID
    
    }
    
    // set the value of featureID
    setFeatureID(newFeatureID : number ): void {
        let oldFeatureID = this._featureID
        this._featureID = newFeatureID
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID, oldFeatureID, newFeatureID))
        }
    
    }
    
    
    // get the value of changeable
    isChangeable(): boolean {
        return this._isChangeable
    
    }
    
    // set the value of changeable
    setChangeable(newIsChangeable : boolean ): void {
        let oldIsChangeable = this._isChangeable
        this._isChangeable = newIsChangeable
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE, oldIsChangeable, newIsChangeable))
        }
    
    }
    
    
    // get the value of derived
    isDerived(): boolean {
        return this._isDerived
    
    }
    
    // set the value of derived
    setDerived(newIsDerived : boolean ): void {
        let oldIsDerived = this._isDerived
        this._isDerived = newIsDerived
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED, oldIsDerived, newIsDerived))
        }
    
    }
    
    
    // get the value of transient
    isTransient(): boolean {
        return this._isTransient
    
    }
    
    // set the value of transient
    setTransient(newIsTransient : boolean ): void {
        let oldIsTransient = this._isTransient
        this._isTransient = newIsTransient
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT, oldIsTransient, newIsTransient))
        }
    
    }
    
    
    // get the value of unsettable
    isUnsettable(): boolean {
        return this._isUnsettable
    
    }
    
    // set the value of unsettable
    setUnsettable(newIsUnsettable : boolean ): void {
        let oldIsUnsettable = this._isUnsettable
        this._isUnsettable = newIsUnsettable
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE, oldIsUnsettable, newIsUnsettable))
        }
    
    }
    
    
    // get the value of volatile
    isVolatile(): boolean {
        return this._isVolatile
    
    }
    
    // set the value of volatile
    setVolatile(newIsVolatile : boolean ): void {
        let oldIsVolatile = this._isVolatile
        this._isVolatile = newIsVolatile
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE, oldIsVolatile, newIsVolatile))
        }
    
    }
    
    

    // getContainerClass default implementation
    getContainerClass(): any {
        throw new Error("getContainerClass not implemented")
    }
    
    

    

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE: {
                return this.isChangeable()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE: {
                return this.getDefaultValue()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL: {
                return this.getDefaultValueLiteral()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED: {
                return this.isDerived()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS: {
                return this.getEContainingClass()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID: {
                return this.getFeatureID()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT: {
                return this.isTransient()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE: {
                return this.isUnsettable()
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE: {
                return this.isVolatile()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }
    
    
    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE: {
    			this.setChangeable(newValue as boolean)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE: {
    			this.setDefaultValue(newValue as any)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL: {
    			this.setDefaultValueLiteral(newValue as string)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED: {
    			this.setDerived(newValue as boolean)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID: {
    			this.setFeatureID(newValue as number)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT: {
    			this.setTransient(newValue as boolean)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE: {
    			this.setUnsettable(newValue as boolean)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE: {
    			this.setVolatile(newValue as boolean)
                break
            }
            default: {
            	super.eSetFromID(featureID, newValue)
            }
        }
    }
    
    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE: {
    		this.setChangeable(true)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE: {
    		this.setDefaultValue(null)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL: {
    		this.setDefaultValueLiteral("")
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED: {
    		this.setDerived(false)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID: {
    		this.setFeatureID(-1)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT: {
    		this.setTransient(false)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE: {
    		this.setUnsettable(false)
                break
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE: {
    		this.setVolatile(false)
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }
    
    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.ESTRUCTURAL_FEATURE__CHANGEABLE: {
                return this.isChangeable() != true
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE: {
                return this.getDefaultValue() != null
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DEFAULT_VALUE_LITERAL: {
                return this.getDefaultValueLiteral() != ""
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__DERIVED: {
                return this.isDerived() != false
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS: {
                return this.getEContainingClass() != null
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__FEATURE_ID: {
                return this.getFeatureID() != -1
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__TRANSIENT: {
                return this.isTransient() != false
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__UNSETTABLE: {
                return this.isUnsettable() != false
            }
            case EcoreConstants.ESTRUCTURAL_FEATURE__VOLATILE: {
                return this.isVolatile() != false
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
    
    eInvokeFromID(operationID: number , args: EList<any>): any {
        switch (operationID) {
            case EcoreConstants.ESTRUCTURAL_FEATURE__GET_CONTAINER_CLASS: {
                return this.getContainerClass() 
            }
            default: {
                return super.eInvokeFromID(operationID,args)
            }
        }
    }
    
    
    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.eBasicSetContainer(otherEnd, EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }
    
    
    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS: {
                return this.eBasicSetContainer(null, EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
    
    
}

