// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import deepEqual from "deep-equal"
import { anything, capture, instance, mock, reset, verify, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAdapter,
    EClassifier,
    EFactory,
    EList,
    ENotificationChain,
    EOPPOSITE_FEATURE_BASE,
    EObject,
    EObjectInternal,
    EObjectList,
    EPackage,
    EPackageImpl,
    EcoreConstants,
    EventType,
    ImmutableEList,
    getEcorePackage
} from "./internal.js"

interface EClassifierInternal extends EClassifier, EObjectInternal {}
interface EFactoryInternal extends EFactory, EObjectInternal {}
interface EPackageInternal extends EPackage, EObjectInternal {}

describe("EPackageImpl", () => {
    test("eStaticClass", () => {
        const o = new EPackageImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getEPackage())
    })

    test("getEClassifiers", () => {
        const o = new EPackageImpl()
        expect(o.getEClassifiers()).not.toBeNull()
    })

    test("getEFactoryInstance", () => {
        const o = new EPackageImpl()

        // get default value
        expect(o.getEFactoryInstance()).toBeNull()
    })

    test("setEFactoryInstance", () => {
        const o = new EPackageImpl()

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // first value
        const mockValue = mock<EFactoryInternal>()
        const value = instance(mockValue)
        when(mockValue.eInverseAdd(o, EcoreConstants.EFACTORY__EPACKAGE, null)).thenReturn(null)
        o.setEFactoryInstance(value)
        verify(mockAdapter.notifyChanged(anything())).once()
        {
            const [notification] = capture(mockAdapter.notifyChanged).last()
            expect(notification.getNotifier()).toBe(o)
            expect(notification.getOldValue()).toBeNull()
            expect(notification.getNewValue()).toBe(value)
        }

        // set with other value
        const mockOther = mock<EFactoryInternal>()
        const other = instance(mockOther)
        reset(mockAdapter)
        reset(mockValue)
        when(mockValue.eInverseRemove(o, EcoreConstants.EFACTORY__EPACKAGE, null)).thenReturn(null)
        when(mockOther.eInverseAdd(o, EcoreConstants.EFACTORY__EPACKAGE, null)).thenReturn(null)
        o.setEFactoryInstance(other)
        verify(mockAdapter.notifyChanged(anything())).once()
        {
            const [notification] = capture(mockAdapter.notifyChanged).last()
            expect(notification.getNotifier()).toBe(o)
            expect(notification.getOldValue()).toBe(value)
            expect(notification.getNewValue()).toBe(other)
            expect(notification.getPosition()).toBe(-1)
        }
    })

    test("basicSetEFactoryInstance", () => {
        const o = new EPackageImpl()
        const mockValue = mock<EFactoryInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // notification chain
        const mockNotifications = mock<ENotificationChain>()
        const notifications = instance(mockNotifications)

        // set value
        when(mockNotifications.add(anything())).thenReturn(true)
        o.basicSetEFactoryInstance(value, notifications)

        // checks
        verify(mockNotifications.add(anything())).once()
        const [notification] = capture(mockNotifications.add).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getEventType()).toBe(EventType.SET)
        expect(notification.getFeatureID()).toBe(EcoreConstants.EPACKAGE__EFACTORY_INSTANCE)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getESubPackages", () => {
        const o = new EPackageImpl()
        expect(o.getESubPackages()).not.toBeNull()
    })

    test("getESuperPackage", () => {
        // default
        const o = new EPackageImpl()
        expect(o.getESuperPackage()).toBeNull()

        // set a mock container
        const mockContainer = mock<EObject>()
        const container = instance(mockContainer)
        o.eSetInternalContainer(container, EcoreConstants.EPACKAGE__ESUPER_PACKAGE)

        // no proxy
        when(mockContainer.eIsProxy()).thenReturn(false)
        expect(o.getESuperPackage()).toBe(container)
        verify(mockContainer.eIsProxy()).once()
    })

    test("getNsPrefix", () => {
        const o = new EPackageImpl()
        // get default value
        expect(o.getNsPrefix()).toBe("")
    })

    test("setNsPrefix", () => {
        const o = new EPackageImpl()
        const value = "Test String"

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setNsPrefix(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe("")
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getNsURI", () => {
        const o = new EPackageImpl()
        // get default value
        expect(o.getNsURI()).toBe("")
    })

    test("setNsURI", () => {
        const o = new EPackageImpl()
        const value = "Test String"

        // add listener
        const mockAdapter = mock<EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.setNsURI(value)

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBe("")
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("getEClassifier", () => {
        const o = new EPackageImpl()
        expect(() => o.getEClassifier("")).toThrow(Error)
    })

    test("eGetFromID", () => {
        const o = new EPackageImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.EPACKAGE__ECLASSIFIERS, true)).toStrictEqual(o.getEClassifiers())
        expect(
            deepEqual(
                o.eGetFromID(EcoreConstants.EPACKAGE__ECLASSIFIERS, false),
                (o.getEClassifiers() as EObjectList<EClassifier>).getUnResolvedList()
            )
        ).toBeTruthy()
        expect(o.eGetFromID(EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, true)).toStrictEqual(o.getEFactoryInstance())
        expect(o.eGetFromID(EcoreConstants.EPACKAGE__ESUB_PACKAGES, true)).toStrictEqual(o.getESubPackages())
        expect(
            deepEqual(
                o.eGetFromID(EcoreConstants.EPACKAGE__ESUB_PACKAGES, false),
                (o.getESubPackages() as EObjectList<EPackage>).getUnResolvedList()
            )
        ).toBeTruthy()
        expect(o.eGetFromID(EcoreConstants.EPACKAGE__ESUPER_PACKAGE, true)).toStrictEqual(o.getESuperPackage())
        expect(o.eGetFromID(EcoreConstants.EPACKAGE__NS_PREFIX, true)).toStrictEqual(o.getNsPrefix())
        expect(o.eGetFromID(EcoreConstants.EPACKAGE__NS_URI, true)).toStrictEqual(o.getNsURI())
    })

    test("eSetFromID", () => {
        const o = new EPackageImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            // list with a value
            const mockValue = mock<EClassifierInternal>()
            const value = instance(mockValue)
            const l = new ImmutableEList<EClassifier>([value])
            when(mockValue.eInverseAdd(o, EcoreConstants.ECLASSIFIER__EPACKAGE, anything())).thenReturn(null)

            // set list with new contents
            o.eSetFromID(EcoreConstants.EPACKAGE__ECLASSIFIERS, l)
            // checks
            expect(o.getEClassifiers().size()).toBe(1)
            expect(o.getEClassifiers().get(0)).toBe(value)
            verify(mockValue.eInverseAdd(o, EcoreConstants.ECLASSIFIER__EPACKAGE, anything())).once()
        }

        {
            const mockValue = mock<EFactoryInternal>()
            const value = instance(mockValue)
            when(mockValue.eInverseAdd(o, EcoreConstants.EFACTORY__EPACKAGE, null)).thenReturn(null)
            o.eSetFromID(EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, value)
            expect(o.eGetFromID(EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, false)).toBe(value)
            verify(mockValue.eInverseAdd(o, EcoreConstants.EFACTORY__EPACKAGE, null)).once()
        }
        {
            // list with a value
            const mockValue = mock<EPackageInternal>()
            const value = instance(mockValue)
            const l = new ImmutableEList<EPackage>([value])
            when(mockValue.eInverseAdd(o, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, anything())).thenReturn(null)

            // set list with new contents
            o.eSetFromID(EcoreConstants.EPACKAGE__ESUB_PACKAGES, l)
            // checks
            expect(o.getESubPackages().size()).toBe(1)
            expect(o.getESubPackages().get(0)).toBe(value)
            verify(mockValue.eInverseAdd(o, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, anything())).once()
        }

        {
            const value = "Test String"
            o.eSetFromID(EcoreConstants.EPACKAGE__NS_PREFIX, value)
            expect(o.eGetFromID(EcoreConstants.EPACKAGE__NS_PREFIX, false)).toBe(value)
        }
        {
            const value = "Test String"
            o.eSetFromID(EcoreConstants.EPACKAGE__NS_URI, value)
            expect(o.eGetFromID(EcoreConstants.EPACKAGE__NS_URI, false)).toBe(value)
        }
    })

    test("eIsSetFromID", () => {
        const o = new EPackageImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.EPACKAGE__ECLASSIFIERS)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EPACKAGE__EFACTORY_INSTANCE)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EPACKAGE__ESUB_PACKAGES)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EPACKAGE__ESUPER_PACKAGE)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EPACKAGE__NS_PREFIX)).toBeFalsy()
        expect(o.eIsSetFromID(EcoreConstants.EPACKAGE__NS_URI)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new EPackageImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.EPACKAGE__ECLASSIFIERS)
            const v = o.eGetFromID(EcoreConstants.EPACKAGE__ECLASSIFIERS, false)
            expect(v).not.toBeNull()
            const l = v as EList<EClassifier>
            expect(l.isEmpty()).toBeTruthy()
        }
        {
            o.eUnsetFromID(EcoreConstants.EPACKAGE__EFACTORY_INSTANCE)
            expect(o.eGetFromID(EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, false)).toBeNull()
        }
        {
            o.eUnsetFromID(EcoreConstants.EPACKAGE__ESUB_PACKAGES)
            const v = o.eGetFromID(EcoreConstants.EPACKAGE__ESUB_PACKAGES, false)
            expect(v).not.toBeNull()
            const l = v as EList<EPackage>
            expect(l.isEmpty()).toBeTruthy()
        }
        {
            o.eUnsetFromID(EcoreConstants.EPACKAGE__NS_PREFIX)
            const v = o.eGetFromID(EcoreConstants.EPACKAGE__NS_PREFIX, false)
            expect(v).toBe("")
        }
        {
            o.eUnsetFromID(EcoreConstants.EPACKAGE__NS_URI)
            const v = o.eGetFromID(EcoreConstants.EPACKAGE__NS_URI, false)
            expect(v).toBe("")
        }
    })

    test("eInvokeFromID", () => {
        const o = new EPackageImpl()
        expect(() => o.eInvokeFromID(-1, null)).toThrow(Error)
        expect(() => o.eInvokeFromID(EcoreConstants.EPACKAGE__GET_ECLASSIFIER_ESTRING, null)).toThrow(Error)
    })

    test("eBasicInverseAdd", () => {
        const o = new EPackageImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseAdd(object, -1, notifications)).toBe(notifications)
        }
        {
            const mockValue = mock<EClassifierInternal>()
            const value = instance(mockValue)
            o.eBasicInverseAdd(value, EcoreConstants.EPACKAGE__ECLASSIFIERS, null)
            expect(o.getEClassifiers().contains(value)).toBeTruthy()
        }
        {
            const mockValue = mock<EFactoryInternal>()
            const value = instance(mockValue)
            o.eBasicInverseAdd(value, EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, null)
            expect(o.getEFactoryInstance()).toBe(value)

            reset(mockValue)
            const mockOther = mock<EFactoryInternal>()
            const other = instance(mockOther)
            when(
                mockValue.eInverseRemove(o, EOPPOSITE_FEATURE_BASE - EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, null)
            ).thenReturn(null)
            o.eBasicInverseAdd(other, EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, null)
            expect(o.getEFactoryInstance()).toBe(other)
        }
        {
            const mockValue = mock<EPackageInternal>()
            const value = instance(mockValue)
            o.eBasicInverseAdd(value, EcoreConstants.EPACKAGE__ESUB_PACKAGES, null)
            expect(o.getESubPackages().contains(value)).toBeTruthy()
        }
        {
            const mockValue = mock<EPackageInternal>()
            const value = instance(mockValue)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eIsProxy()).thenReturn(false)
            o.eBasicInverseAdd(value, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, null)
            expect(o.getESuperPackage()).toBe(value)

            reset(mockValue)
            const mockOther = mock<EPackageInternal>()
            const other = instance(mockOther)
            when(mockOther.eResource()).thenReturn(null)
            when(mockOther.eIsProxy()).thenReturn(false)
            when(mockValue.eResource()).thenReturn(null)
            when(mockValue.eInverseRemove(o, EcoreConstants.EPACKAGE__ESUB_PACKAGES, null)).thenReturn(null)
            o.eBasicInverseAdd(other, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, null)
            expect(o.getESuperPackage()).toBe(other)
        }
    })

    test("eBasicInverseRemove", () => {
        const o = new EPackageImpl()
        {
            const mockObject = mock<EObject>()
            const object = instance(mockObject)
            const mockNotifications = mock<ENotificationChain>()
            const notifications = instance(mockNotifications)
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications)
        }
        {
            // initialize list with a mock object
            const mockValue = mock<EClassifierInternal>()
            const value = instance(mockValue)
            when(mockValue.eInverseAdd(o, EcoreConstants.ECLASSIFIER__EPACKAGE, anything())).thenReturn(null)

            o.getEClassifiers().add(value)

            // basic inverse remove
            o.eBasicInverseRemove(value, EcoreConstants.EPACKAGE__ECLASSIFIERS, null)

            // check it was removed
            expect(o.getEClassifiers().contains(value)).toBeFalsy()
        }
        {
            const mockValue = mock<EFactoryInternal>()
            const value = instance(mockValue)
            o.eBasicInverseRemove(value, EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, null)
        }
        {
            // initialize list with a mock object
            const mockValue = mock<EPackageInternal>()
            const value = instance(mockValue)
            when(mockValue.eInverseAdd(o, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, anything())).thenReturn(null)

            o.getESubPackages().add(value)

            // basic inverse remove
            o.eBasicInverseRemove(value, EcoreConstants.EPACKAGE__ESUB_PACKAGES, null)

            // check it was removed
            expect(o.getESubPackages().contains(value)).toBeFalsy()
        }
        {
            const mockValue = mock<EPackageInternal>()
            const value = instance(mockValue)
            o.eBasicInverseRemove(value, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, null)
        }
    })
})
