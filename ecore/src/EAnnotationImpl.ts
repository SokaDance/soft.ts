// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import {
    BasicEObjectList,
    BasicEObjectMap,
    EAnnotation,
    EClass,
    EList,
    EMap,
    EMapEntry,
    EModelElement,
    EModelElementExt,
    ENotificationChain,
    ENotifyingList,
    EObject,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage,
    isEObjectInternal,
    isEObjectList
} from "./internal.js"

export class EAnnotationImpl extends EModelElementExt implements EAnnotation {
    protected _details: EMap<string, string>
    protected _source: string
    protected _references: EList<EObject>
    protected _contents: EList<EObject>

    constructor() {
        super()
        this._contents = null
        this._details = null
        this._references = null
        this._source = ""
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEAnnotationClass()
    }

    // get the value of contents
    getContents(): EList<EObject> {
        if (this._contents == null) {
            this._contents = this.initContents()
        }
        return this._contents
    }

    // set the value of contents
    setContents(newContents: EList<EObject>) {
        const l = this.getContents()
        l.clear()
        l.addAll(newContents)
    }

    // get the value of details
    getDetails(): EMap<string, string> {
        if (this._details == null) {
            this._details = this.initDetails()
        }
        return this._details
    }

    // set the value of details
    setDetails(newDetails: EMap<string, string>) {
        const l = this.getDetails()
        l.clear()
        l.addAll(newDetails)
    }

    // get the value of eModelElement
    getEModelElement(): EModelElement {
        if (this.eContainerFeatureID() == EcoreConstants.EANNOTATION__EMODEL_ELEMENT) {
            return this.eContainer() as EModelElement
        }
        return null
    }

    // set the value of eModelElement
    setEModelElement(newEModelElement: EModelElement): void {
        if (
            newEModelElement != this.eInternalContainer() ||
            (newEModelElement != null && this.eContainerFeatureID() != EcoreConstants.EANNOTATION__EMODEL_ELEMENT)
        ) {
            let notifications: ENotificationChain = null
            if (this.eInternalContainer() != null) {
                notifications = this.eBasicRemoveFromContainer(notifications)
            }
            if (isEObjectInternal(newEModelElement)) {
                notifications = newEModelElement.eInverseAdd(
                    this,
                    EcoreConstants.EMODEL_ELEMENT__EANNOTATIONS,
                    notifications
                )
            }
            notifications = this.basicSetEModelElement(newEModelElement, notifications)
            if (notifications != null) {
                notifications.dispatch()
            }
        } else if (this.eNotificationRequired()) {
            this.eNotify(
                new Notification(
                    this,
                    EventType.SET,
                    EcoreConstants.EANNOTATION__EMODEL_ELEMENT,
                    newEModelElement,
                    newEModelElement
                )
            )
        }
    }

    basicSetEModelElement(newEModelElement: EModelElement, msgs: ENotificationChain): ENotificationChain {
        return this.eBasicSetContainer(newEModelElement, EcoreConstants.EANNOTATION__EMODEL_ELEMENT, msgs)
    }

    // get the value of references
    getReferences(): EList<EObject> {
        if (this._references == null) {
            this._references = this.initReferences()
        }
        return this._references
    }

    // set the value of references
    setReferences(newReferences: EList<EObject>) {
        const l = this.getReferences()
        l.clear()
        l.addAll(newReferences)
    }

    // get the value of source
    getSource(): string {
        return this._source
    }

    // set the value of source
    setSource(newSource: string): void {
        let oldSource = this._source
        this._source = newSource
        if (this.eNotificationRequired()) {
            this.eNotify(
                new Notification(this, EventType.SET, EcoreConstants.EANNOTATION__SOURCE, oldSource, newSource)
            )
        }
    }

    protected initContents(): EList<EObject> {
        return new BasicEObjectList<EObject>(
            this,
            EcoreConstants.EANNOTATION__CONTENTS,
            -1,
            true,
            true,
            false,
            false,
            false
        )
    }
    protected initDetails(): EMap<string, string> {
        return new BasicEObjectMap<string, string>(getEcorePackage().getEStringToStringMapEntry())
    }
    protected initReferences(): EList<EObject> {
        return new BasicEObjectList<EObject>(
            this,
            EcoreConstants.EANNOTATION__REFERENCES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.EANNOTATION__CONTENTS: {
                return this.getContents()
            }
            case EcoreConstants.EANNOTATION__DETAILS: {
                return this.getDetails()
            }
            case EcoreConstants.EANNOTATION__EMODEL_ELEMENT: {
                return this.getEModelElement()
            }
            case EcoreConstants.EANNOTATION__REFERENCES: {
                const list = this.getReferences()
                return !resolve && isEObjectList(list) ? list.getUnResolvedList() : list
            }
            case EcoreConstants.EANNOTATION__SOURCE: {
                return this.getSource()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    async eGetFromIDAsync(featureID: number, resolve: boolean): Promise<any> {
        return this.eGetFromID(featureID, resolve)
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.EANNOTATION__CONTENTS: {
                const list = this.getContents()
                list.clear()
                list.addAll(newValue as EList<EObject>)
                break
            }
            case EcoreConstants.EANNOTATION__DETAILS: {
                const list = this.getDetails()
                list.clear()
                list.addAll(newValue as EList<EMapEntry<string, string>>)
                break
            }
            case EcoreConstants.EANNOTATION__EMODEL_ELEMENT: {
                this.setEModelElement(newValue as EModelElement)
                break
            }
            case EcoreConstants.EANNOTATION__REFERENCES: {
                const list = this.getReferences()
                list.clear()
                list.addAll(newValue as EList<EObject>)
                break
            }
            case EcoreConstants.EANNOTATION__SOURCE: {
                this.setSource(newValue as string)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.EANNOTATION__CONTENTS: {
                this.getContents().clear()
                break
            }
            case EcoreConstants.EANNOTATION__DETAILS: {
                this.getDetails().clear()
                break
            }
            case EcoreConstants.EANNOTATION__EMODEL_ELEMENT: {
                this.setEModelElement(null)
                break
            }
            case EcoreConstants.EANNOTATION__REFERENCES: {
                this.getReferences().clear()
                break
            }
            case EcoreConstants.EANNOTATION__SOURCE: {
                this.setSource("")
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.EANNOTATION__CONTENTS: {
                return this._contents && !this._contents.isEmpty()
            }
            case EcoreConstants.EANNOTATION__DETAILS: {
                return this._details && !this._details.isEmpty()
            }
            case EcoreConstants.EANNOTATION__EMODEL_ELEMENT: {
                return this.getEModelElement() != null
            }
            case EcoreConstants.EANNOTATION__REFERENCES: {
                return this._references && !this._references.isEmpty()
            }
            case EcoreConstants.EANNOTATION__SOURCE: {
                return this._source != ""
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EANNOTATION__EMODEL_ELEMENT: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.basicSetEModelElement(otherEnd as EModelElement, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EANNOTATION__CONTENTS: {
                let list = this.getContents() as ENotifyingList<EObject>
                let end = otherEnd as EObject
                return list.removeWithNotification(end, notifications)
            }
            case EcoreConstants.EANNOTATION__DETAILS: {
                return notifications
            }
            case EcoreConstants.EANNOTATION__EMODEL_ELEMENT: {
                return this.basicSetEModelElement(null, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
