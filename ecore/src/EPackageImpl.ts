// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group                                                 
//                                                                              
// This Source Code Form is subject to the terms of the Mozilla Public          
// License, v. 2.0. If a copy of the MPL was not distributed with this          
// file, You can obtain one at https://mozilla.org/MPL/2.0/.                    
//                                                                              
// *****************************************************************************


import {
    BasicEDataTypeList,
    BasicEList,
    BasicEObjectList,
    EClass,
    EClassifier,
    EFactory,
    EList,
    ENamedElement,
    ENamedElementImpl,
    ENotification,
    ENotificationChain,
    ENotifyingList,
    EOPPOSITE_FEATURE_BASE,
    EObject,
    EObjectInternal,
    EPackage,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage,
    isEObjectInternal,
    isEObjectList,
} from "./internal.js"


export class EPackageImpl extends ENamedElementImpl implements EPackage {
    protected _eClassifiers: EList<EClassifier>
    protected _eFactoryInstance: EFactory
    protected _nsURI: string
    protected _eSubPackages: EList<EPackage>
    protected _nsPrefix: string
    

    constructor() {
        super()
        this._eClassifiers = null
        this._eFactoryInstance = null
        this._eSubPackages = null
        this._nsPrefix = ""
        this._nsURI = ""
        
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEPackage()
    }

    
    // get the value of eClassifiers
    getEClassifiers(): EList<EClassifier> {
        if (this._eClassifiers == null) {
            this._eClassifiers = this.initEClassifiers()
        }
        return this._eClassifiers
    
    }
    
    
    // get the value of eFactoryInstance
    getEFactoryInstance(): EFactory {
        return this._eFactoryInstance
    
    }
    
    // set the value of eFactoryInstance
    setEFactoryInstance(newEFactoryInstance : EFactory ): void {
        let oldEFactoryInstance = this._eFactoryInstance
        if ( newEFactoryInstance != oldEFactoryInstance ) {
            let notifications : ENotificationChain = null
            if (isEObjectInternal(oldEFactoryInstance)) {
                notifications = oldEFactoryInstance.eInverseRemove(this, EcoreConstants.EFACTORY__EPACKAGE , notifications)
            }
            if (isEObjectInternal(newEFactoryInstance)) {
                notifications = newEFactoryInstance.eInverseAdd(this, EcoreConstants.EFACTORY__EPACKAGE , notifications)
            }
            notifications = this.basicSetEFactoryInstance(newEFactoryInstance,notifications)
            if (notifications != null) {
                notifications.dispatch()
            }
        }
    
    }
    
    
    basicSetEFactoryInstance(newEFactoryInstance: EFactory , msgs: ENotificationChain ): ENotificationChain {
        let oldEFactoryInstance = this._eFactoryInstance
        this._eFactoryInstance = newEFactoryInstance
        let notifications = msgs
        if ( this.eNotificationRequired ) {
            let notification = new Notification(this, EventType.SET, EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, oldEFactoryInstance, newEFactoryInstance)
            if (notifications != null ) {
                notifications.add( notification )
            } else {
                notifications = notification
            }
        }
        return notifications
    }
    
    // get the value of eSubPackages
    getESubPackages(): EList<EPackage> {
        if (this._eSubPackages == null) {
            this._eSubPackages = this.initESubPackages()
        }
        return this._eSubPackages
    
    }
    
    
    // get the value of eSuperPackage
    getESuperPackage(): EPackage {
        if (this.eContainerFeatureID() == EcoreConstants.EPACKAGE__ESUPER_PACKAGE) {
            return this.eContainer() as EPackage
        }
        return null
    
    }
    
    
    // get the value of nsPrefix
    getNsPrefix(): string {
        return this._nsPrefix
    
    }
    
    // set the value of nsPrefix
    setNsPrefix(newNsPrefix : string ): void {
        let oldNsPrefix = this._nsPrefix
        this._nsPrefix = newNsPrefix
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.EPACKAGE__NS_PREFIX, oldNsPrefix, newNsPrefix))
        }
    
    }
    
    
    // get the value of nsURI
    getNsURI(): string {
        return this._nsURI
    
    }
    
    // set the value of nsURI
    setNsURI(newNsURI : string ): void {
        let oldNsURI = this._nsURI
        this._nsURI = newNsURI
        if (this.eNotificationRequired) {
            this.eNotify(new Notification(this, EventType.SET, EcoreConstants.EPACKAGE__NS_URI, oldNsURI, newNsURI))
        }
    
    }
    
    

    // getEClassifier default implementation
    getEClassifier(name: string): EClassifier {
        throw new Error("getEClassifier not implemented")
    }
    
    

    protected initEClassifiers(): EList<EClassifier> {
        return new BasicEObjectList<EClassifier>(this, EcoreConstants.EPACKAGE__ECLASSIFIERS ,EcoreConstants.ECLASSIFIER__EPACKAGE, true , true , true , false , false)
    }
    protected initESubPackages(): EList<EPackage> {
        return new BasicEObjectList<EPackage>(this, EcoreConstants.EPACKAGE__ESUB_PACKAGES ,EcoreConstants.EPACKAGE__ESUPER_PACKAGE, true , true , true , false , false)
    }
    

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.EPACKAGE__ECLASSIFIERS: {
                return this.getEClassifiers()
            }
            case EcoreConstants.EPACKAGE__EFACTORY_INSTANCE: {
                return this.getEFactoryInstance()
            }
            case EcoreConstants.EPACKAGE__ESUB_PACKAGES: {
                return this.getESubPackages()
            }
            case EcoreConstants.EPACKAGE__ESUPER_PACKAGE: {
                return this.getESuperPackage()
            }
            case EcoreConstants.EPACKAGE__NS_PREFIX: {
                return this.getNsPrefix()
            }
            case EcoreConstants.EPACKAGE__NS_URI: {
                return this.getNsURI()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }
    
    
    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.EPACKAGE__ECLASSIFIERS: {
                const list = this.getEClassifiers()
                list.clear()
                list.addAll(newValue as EList<EClassifier>)
                break
            }
            case EcoreConstants.EPACKAGE__EFACTORY_INSTANCE: {
    			this.setEFactoryInstance(newValue as EFactory)
                break
            }
            case EcoreConstants.EPACKAGE__ESUB_PACKAGES: {
                const list = this.getESubPackages()
                list.clear()
                list.addAll(newValue as EList<EPackage>)
                break
            }
            case EcoreConstants.EPACKAGE__NS_PREFIX: {
    			this.setNsPrefix(newValue as string)
                break
            }
            case EcoreConstants.EPACKAGE__NS_URI: {
    			this.setNsURI(newValue as string)
                break
            }
            default: {
            	super.eSetFromID(featureID, newValue)
            }
        }
    }
    
    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.EPACKAGE__ECLASSIFIERS: {
                this.getEClassifiers().clear()
                break
            }
            case EcoreConstants.EPACKAGE__EFACTORY_INSTANCE: {
    		this.setEFactoryInstance(null)
                break
            }
            case EcoreConstants.EPACKAGE__ESUB_PACKAGES: {
                this.getESubPackages().clear()
                break
            }
            case EcoreConstants.EPACKAGE__NS_PREFIX: {
    		this.setNsPrefix("")
                break
            }
            case EcoreConstants.EPACKAGE__NS_URI: {
    		this.setNsURI("")
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }
    
    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.EPACKAGE__ECLASSIFIERS: {
                return this.getEClassifiers() && !this.getEClassifiers().isEmpty()
            }
            case EcoreConstants.EPACKAGE__EFACTORY_INSTANCE: {
                return this.getEFactoryInstance() != null
            }
            case EcoreConstants.EPACKAGE__ESUB_PACKAGES: {
                return this.getESubPackages() && !this.getESubPackages().isEmpty()
            }
            case EcoreConstants.EPACKAGE__ESUPER_PACKAGE: {
                return this.getESuperPackage() != null
            }
            case EcoreConstants.EPACKAGE__NS_PREFIX: {
                return this.getNsPrefix() != ""
            }
            case EcoreConstants.EPACKAGE__NS_URI: {
                return this.getNsURI() != ""
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
    
    eInvokeFromID(operationID: number , args: EList<any>): any {
        switch (operationID) {
            case EcoreConstants.EPACKAGE__GET_ECLASSIFIER_ESTRING: {
                return this.getEClassifier(args.get(0) as string) 
            }
            default: {
                return super.eInvokeFromID(operationID,args)
            }
        }
    }
    
    
    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EPACKAGE__ECLASSIFIERS: {
                let list = this.getEClassifiers() as ENotifyingList<EClassifier>
                let end = otherEnd as EClassifier
                return list.addWithNotification(end, notifications);
            }
            case EcoreConstants.EPACKAGE__EFACTORY_INSTANCE: {
                let msgs = notifications;
    			const eFactoryInstance = this.getEFactoryInstance()	
                if (isEObjectInternal(eFactoryInstance)) {
                    msgs = eFactoryInstance.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EcoreConstants.EPACKAGE__EFACTORY_INSTANCE, msgs)
                }
                return this.basicSetEFactoryInstance(otherEnd as EFactory,msgs)
            }
            case EcoreConstants.EPACKAGE__ESUB_PACKAGES: {
                let list = this.getESubPackages() as ENotifyingList<EPackage>
                let end = otherEnd as EPackage
                return list.addWithNotification(end, notifications);
            }
            case EcoreConstants.EPACKAGE__ESUPER_PACKAGE: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.eBasicSetContainer(otherEnd, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }
    
    
    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EPACKAGE__ECLASSIFIERS: {
                let list = this.getEClassifiers() as ENotifyingList<EClassifier>
                let end = otherEnd as EClassifier
                return list.removeWithNotification(end, notifications)
            }
            case EcoreConstants.EPACKAGE__EFACTORY_INSTANCE: {
                return this.basicSetEFactoryInstance(null, notifications)
            }
            case EcoreConstants.EPACKAGE__ESUB_PACKAGES: {
                let list = this.getESubPackages() as ENotifyingList<EPackage>
                let end = otherEnd as EPackage
                return list.removeWithNotification(end, notifications)
            }
            case EcoreConstants.EPACKAGE__ESUPER_PACKAGE: {
                return this.eBasicSetContainer(null, EcoreConstants.EPACKAGE__ESUPER_PACKAGE, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
    
    
}

