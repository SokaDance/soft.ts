// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import {
    Addressable,
    Book,
    Borrower,
    Employee,
    Item,
    Library,
    LibraryConstants,
    Person,
    Writer,
    getLibraryPackage
} from "./internal.js"

export class LibraryImpl extends ecore.EObjectImpl implements Library {
    protected _branches: ecore.EList<Library>
    protected _name: string
    protected _people: ecore.EList<any>
    protected _books: ecore.EList<Book>
    protected _stock: ecore.EList<Item>
    protected _writers: ecore.EList<Writer>
    protected _borrowers: ecore.EList<Borrower>
    protected _proprietary: Person
    protected _address: string
    protected _employees: ecore.EList<Employee>

    constructor() {
        super()
        this._address = ""
        this._books = null
        this._borrowers = null
        this._branches = null
        this._employees = null
        this._name = ""
        this._proprietary = null
        this._stock = null
        this._writers = null
    }

    eStaticClass(): ecore.EClass {
        return getLibraryPackage().getLibrary()
    }

    // get the value of address
    get address(): string {
        return this._address
    }

    // set the value of address
    set address(newAddress: string) {
        let oldAddress = this._address
        this._address = newAddress
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.LIBRARY__ADDRESS,
                    oldAddress,
                    newAddress
                )
            )
        }
    }

    // get the value of books
    get books(): ecore.EList<Book> {
        if (this._books == null) {
            this._books = new ecore.BasicEObjectList<Book>(
                this,
                LibraryConstants.LIBRARY__BOOKS,
                -1,
                true,
                true,
                false,
                false,
                false
            )
        }
        return this._books
    }

    // set the value of books
    set books(newBooks: ecore.EList<Book>) {
        const l = this.books
        l.clear()
        l.addAll(newBooks)
    }

    // get the value of borrowers
    get borrowers(): ecore.EList<Borrower> {
        if (this._borrowers == null) {
            this._borrowers = new ecore.BasicEObjectList<Borrower>(
                this,
                LibraryConstants.LIBRARY__BORROWERS,
                -1,
                true,
                true,
                false,
                false,
                false
            )
        }
        return this._borrowers
    }

    // set the value of borrowers
    set borrowers(newBorrowers: ecore.EList<Borrower>) {
        const l = this.borrowers
        l.clear()
        l.addAll(newBorrowers)
    }

    // get the value of branches
    get branches(): ecore.EList<Library> {
        if (this._branches == null) {
            this._branches = new ecore.BasicEObjectList<Library>(
                this,
                LibraryConstants.LIBRARY__BRANCHES,
                LibraryConstants.LIBRARY__PARENT_BRANCH,
                true,
                true,
                true,
                false,
                false
            )
        }
        return this._branches
    }

    // set the value of branches
    set branches(newBranches: ecore.EList<Library>) {
        const l = this.branches
        l.clear()
        l.addAll(newBranches)
    }

    // get the value of employees
    get employees(): ecore.EList<Employee> {
        if (this._employees == null) {
            this._employees = new ecore.BasicEObjectList<Employee>(
                this,
                LibraryConstants.LIBRARY__EMPLOYEES,
                -1,
                true,
                true,
                false,
                false,
                false
            )
        }
        return this._employees
    }

    // set the value of employees
    set employees(newEmployees: ecore.EList<Employee>) {
        const l = this.employees
        l.clear()
        l.addAll(newEmployees)
    }

    // get the value of name
    get name(): string {
        return this._name
    }

    // set the value of name
    set name(newName: string) {
        let oldName = this._name
        this._name = newName
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(this, ecore.EventType.SET, LibraryConstants.LIBRARY__NAME, oldName, newName)
            )
        }
    }

    // get the value of parentBranch
    get parentBranch(): Library {
        if (this.eContainerFeatureID() == LibraryConstants.LIBRARY__PARENT_BRANCH) {
            return this.eContainer() as Library
        }
        return null
    }

    // set the value of parentBranch
    set parentBranch(newParentBranch: Library) {
        if (
            newParentBranch != this.eInternalContainer() ||
            (newParentBranch != null && this.eContainerFeatureID() != LibraryConstants.LIBRARY__PARENT_BRANCH)
        ) {
            let notifications: ecore.ENotificationChain = null
            if (this.eInternalContainer() != null) {
                notifications = this.eBasicRemoveFromContainer(notifications)
            }
            if (ecore.isEObjectInternal(newParentBranch)) {
                notifications = newParentBranch.eInverseAdd(this, LibraryConstants.LIBRARY__BRANCHES, notifications)
            }
            notifications = this.basicSetParentBranch(newParentBranch, notifications)
            if (notifications != null) {
                notifications.dispatch()
            }
        } else if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.LIBRARY__PARENT_BRANCH,
                    newParentBranch,
                    newParentBranch
                )
            )
        }
    }

    basicSetParentBranch(newParentBranch: Library, msgs: ecore.ENotificationChain): ecore.ENotificationChain {
        return this.eBasicSetContainer(newParentBranch, LibraryConstants.LIBRARY__PARENT_BRANCH, msgs)
    }

    // get the value of people
    get people(): ecore.EList<any> {
        if (this._people == null) {
            this._people = null
        }
        return this._people
    }

    // set the value of people
    set people(newPeople: ecore.EList<any>) {
        const l = this.people
        l.clear()
        l.addAll(newPeople)
    }

    // get the value of proprietary
    get proprietary(): Person {
        return this._proprietary
    }

    // set the value of proprietary
    set proprietary(newProprietary: Person) {
        let oldProprietary = this._proprietary
        if (newProprietary != oldProprietary) {
            let notifications: ecore.ENotificationChain = null
            if (ecore.isEObjectInternal(oldProprietary)) {
                notifications = oldProprietary.eInverseRemove(
                    this,
                    ecore.EOPPOSITE_FEATURE_BASE - LibraryConstants.LIBRARY__PROPRIETARY,
                    notifications
                )
            }
            if (ecore.isEObjectInternal(newProprietary)) {
                notifications = newProprietary.eInverseAdd(
                    this,
                    ecore.EOPPOSITE_FEATURE_BASE - LibraryConstants.LIBRARY__PROPRIETARY,
                    notifications
                )
            }
            notifications = this.basicSetProprietary(newProprietary, notifications)
            if (notifications != null) {
                notifications.dispatch()
            }
        }
    }

    basicSetProprietary(newProprietary: Person, msgs: ecore.ENotificationChain): ecore.ENotificationChain {
        let oldProprietary = this._proprietary
        this._proprietary = newProprietary
        let notifications = msgs
        if (this.eNotificationRequired()) {
            let notification = new ecore.Notification(
                this,
                ecore.EventType.SET,
                LibraryConstants.LIBRARY__PROPRIETARY,
                oldProprietary,
                newProprietary
            )
            if (notifications != null) {
                notifications.add(notification)
            } else {
                notifications = notification
            }
        }
        return notifications
    }

    // get the value of stock
    get stock(): ecore.EList<Item> {
        if (this._stock == null) {
            this._stock = new ecore.BasicEObjectList<Item>(
                this,
                LibraryConstants.LIBRARY__STOCK,
                -1,
                true,
                true,
                false,
                false,
                false
            )
        }
        return this._stock
    }

    // set the value of stock
    set stock(newStock: ecore.EList<Item>) {
        const l = this.stock
        l.clear()
        l.addAll(newStock)
    }

    // get the value of writers
    get writers(): ecore.EList<Writer> {
        if (this._writers == null) {
            this._writers = new ecore.BasicEObjectList<Writer>(
                this,
                LibraryConstants.LIBRARY__WRITERS,
                -1,
                true,
                true,
                false,
                false,
                false
            )
        }
        return this._writers
    }

    // set the value of writers
    set writers(newWriters: ecore.EList<Writer>) {
        const l = this.writers
        l.clear()
        l.addAll(newWriters)
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case LibraryConstants.LIBRARY__ADDRESS: {
                return this.address
            }
            case LibraryConstants.LIBRARY__BOOKS: {
                return this.books
            }
            case LibraryConstants.LIBRARY__BORROWERS: {
                return this.borrowers
            }
            case LibraryConstants.LIBRARY__BRANCHES: {
                return this.branches
            }
            case LibraryConstants.LIBRARY__EMPLOYEES: {
                return this.employees
            }
            case LibraryConstants.LIBRARY__NAME: {
                return this.name
            }
            case LibraryConstants.LIBRARY__PARENT_BRANCH: {
                return this.parentBranch
            }
            case LibraryConstants.LIBRARY__PEOPLE: {
                return this.people
            }
            case LibraryConstants.LIBRARY__PROPRIETARY: {
                return this.proprietary
            }
            case LibraryConstants.LIBRARY__STOCK: {
                return this.stock
            }
            case LibraryConstants.LIBRARY__WRITERS: {
                return this.writers
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case LibraryConstants.LIBRARY__ADDRESS: {
                this.address = newValue as string
                break
            }
            case LibraryConstants.LIBRARY__BOOKS: {
                const list = this.books
                list.clear()
                list.addAll(newValue as ecore.EList<Book>)
                break
            }
            case LibraryConstants.LIBRARY__BORROWERS: {
                const list = this.borrowers
                list.clear()
                list.addAll(newValue as ecore.EList<Borrower>)
                break
            }
            case LibraryConstants.LIBRARY__BRANCHES: {
                const list = this.branches
                list.clear()
                list.addAll(newValue as ecore.EList<Library>)
                break
            }
            case LibraryConstants.LIBRARY__EMPLOYEES: {
                const list = this.employees
                list.clear()
                list.addAll(newValue as ecore.EList<Employee>)
                break
            }
            case LibraryConstants.LIBRARY__NAME: {
                this.name = newValue as string
                break
            }
            case LibraryConstants.LIBRARY__PARENT_BRANCH: {
                this.parentBranch = newValue as Library
                break
            }
            case LibraryConstants.LIBRARY__PEOPLE: {
                const list = this.people
                list.clear()
                list.addAll(newValue as ecore.EList<any>)
                break
            }
            case LibraryConstants.LIBRARY__PROPRIETARY: {
                this.proprietary = newValue as Person
                break
            }
            case LibraryConstants.LIBRARY__STOCK: {
                const list = this.stock
                list.clear()
                list.addAll(newValue as ecore.EList<Item>)
                break
            }
            case LibraryConstants.LIBRARY__WRITERS: {
                const list = this.writers
                list.clear()
                list.addAll(newValue as ecore.EList<Writer>)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case LibraryConstants.LIBRARY__ADDRESS: {
                this.address = ""
                break
            }
            case LibraryConstants.LIBRARY__BOOKS: {
                this.books.clear()
                break
            }
            case LibraryConstants.LIBRARY__BORROWERS: {
                this.borrowers.clear()
                break
            }
            case LibraryConstants.LIBRARY__BRANCHES: {
                this.branches.clear()
                break
            }
            case LibraryConstants.LIBRARY__EMPLOYEES: {
                this.employees.clear()
                break
            }
            case LibraryConstants.LIBRARY__NAME: {
                this.name = ""
                break
            }
            case LibraryConstants.LIBRARY__PARENT_BRANCH: {
                this.parentBranch = null
                break
            }
            case LibraryConstants.LIBRARY__PEOPLE: {
                this.people.clear()
                break
            }
            case LibraryConstants.LIBRARY__PROPRIETARY: {
                this.proprietary = null
                break
            }
            case LibraryConstants.LIBRARY__STOCK: {
                this.stock.clear()
                break
            }
            case LibraryConstants.LIBRARY__WRITERS: {
                this.writers.clear()
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case LibraryConstants.LIBRARY__ADDRESS: {
                return this._address != ""
            }
            case LibraryConstants.LIBRARY__BOOKS: {
                return this._books && !this._books.isEmpty()
            }
            case LibraryConstants.LIBRARY__BORROWERS: {
                return this._borrowers && !this._borrowers.isEmpty()
            }
            case LibraryConstants.LIBRARY__BRANCHES: {
                return this._branches && !this._branches.isEmpty()
            }
            case LibraryConstants.LIBRARY__EMPLOYEES: {
                return this._employees && !this._employees.isEmpty()
            }
            case LibraryConstants.LIBRARY__NAME: {
                return this._name != ""
            }
            case LibraryConstants.LIBRARY__PARENT_BRANCH: {
                return this.parentBranch != null
            }
            case LibraryConstants.LIBRARY__PEOPLE: {
                return this._people && !this._people.isEmpty()
            }
            case LibraryConstants.LIBRARY__PROPRIETARY: {
                return this._proprietary != null
            }
            case LibraryConstants.LIBRARY__STOCK: {
                return this._stock && !this._stock.isEmpty()
            }
            case LibraryConstants.LIBRARY__WRITERS: {
                return this._writers && !this._writers.isEmpty()
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eBasicInverseAdd(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case LibraryConstants.LIBRARY__BRANCHES: {
                let list = this.branches as ecore.ENotifyingList<Library>
                let end = otherEnd as Library
                return list.addWithNotification(end, notifications)
            }
            case LibraryConstants.LIBRARY__PARENT_BRANCH: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.basicSetParentBranch(otherEnd as Library, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case LibraryConstants.LIBRARY__BOOKS: {
                let list = this.books as ecore.ENotifyingList<Book>
                let end = otherEnd as Book
                return list.removeWithNotification(end, notifications)
            }
            case LibraryConstants.LIBRARY__BORROWERS: {
                let list = this.borrowers as ecore.ENotifyingList<Borrower>
                let end = otherEnd as Borrower
                return list.removeWithNotification(end, notifications)
            }
            case LibraryConstants.LIBRARY__BRANCHES: {
                let list = this.branches as ecore.ENotifyingList<Library>
                let end = otherEnd as Library
                return list.removeWithNotification(end, notifications)
            }
            case LibraryConstants.LIBRARY__EMPLOYEES: {
                let list = this.employees as ecore.ENotifyingList<Employee>
                let end = otherEnd as Employee
                return list.removeWithNotification(end, notifications)
            }
            case LibraryConstants.LIBRARY__PARENT_BRANCH: {
                return this.basicSetParentBranch(null, notifications)
            }
            case LibraryConstants.LIBRARY__PROPRIETARY: {
                return this.basicSetProprietary(null, notifications)
            }
            case LibraryConstants.LIBRARY__STOCK: {
                let list = this.stock as ecore.ENotifyingList<Item>
                let end = otherEnd as Item
                return list.removeWithNotification(end, notifications)
            }
            case LibraryConstants.LIBRARY__WRITERS: {
                let list = this.writers as ecore.ENotifyingList<Writer>
                let end = otherEnd as Writer
                return list.removeWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
