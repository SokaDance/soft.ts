// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import {
    Addressable,
    AudioVisualItem,
    Book,
    BookCategory,
    BookImpl,
    BookIndex,
    BookIndexImpl,
    BookOnTape,
    BookOnTapeImpl,
    Borrower,
    BorrowerImpl,
    CirculatingItem,
    DocumentRoot,
    DocumentRootImpl,
    Employee,
    EmployeeImpl,
    Item,
    Lendable,
    Library,
    LibraryConstants,
    LibraryFactory,
    LibraryImpl,
    Periodical,
    Person,
    PersonImpl,
    VideoCassette,
    VideoCassetteImpl,
    Writer,
    WriterExt,
    bookCategoryFromString,
    bookCategoryToString
} from "./internal.js"

export class LibraryFactoryImpl extends ecore.EFactoryExt implements LibraryFactory {
    private static _instance: LibraryFactoryImpl = null

    public static getInstance(): LibraryFactoryImpl {
        if (!this._instance) {
            this._instance = new LibraryFactoryImpl()
        }
        return this._instance
    }

    protected constructor() {
        super()
    }

    create(eClass: ecore.EClass): ecore.EObject {
        switch (eClass.classifierID) {
            case LibraryConstants.BOOK:
                return this.createBook()
            case LibraryConstants.BOOK_INDEX:
                return this.createBookIndex()
            case LibraryConstants.LIBRARY:
                return this.createLibrary()
            case LibraryConstants.WRITER:
                return this.createWriter()
            case LibraryConstants.BOOK_ON_TAPE:
                return this.createBookOnTape()
            case LibraryConstants.VIDEO_CASSETTE:
                return this.createVideoCassette()
            case LibraryConstants.BORROWER:
                return this.createBorrower()
            case LibraryConstants.PERSON:
                return this.createPerson()
            case LibraryConstants.EMPLOYEE:
                return this.createEmployee()
            case LibraryConstants.DOCUMENT_ROOT:
                return this.createDocumentRoot()
            default:
                throw new Error("create: " + eClass.classifierID + " not found")
        }
    }

    createBook(): Book {
        return new BookImpl()
    }

    createBookIndex(): BookIndex {
        return new BookIndexImpl()
    }

    createLibrary(): Library {
        return new LibraryImpl()
    }

    createLibraryFromContainer(eContainer: Library): Library {
        let element = new LibraryImpl()
        if (eContainer != null) {
            eContainer.branches.add(element)
        }
        return element
    }

    createWriter(): Writer {
        return new WriterExt()
    }

    createBookOnTape(): BookOnTape {
        return new BookOnTapeImpl()
    }

    createVideoCassette(): VideoCassette {
        return new VideoCassetteImpl()
    }

    createBorrower(): Borrower {
        return new BorrowerImpl()
    }

    createPerson(): Person {
        return new PersonImpl()
    }

    createEmployee(): Employee {
        return new EmployeeImpl()
    }

    createDocumentRoot(): DocumentRoot {
        return new DocumentRootImpl()
    }

    createFromString(eDataType: ecore.EDataType, literalValue: string): any {
        switch (eDataType.classifierID) {
            case LibraryConstants.BOOK_CATEGORY:
                return this.createBookCategoryFromString(eDataType, literalValue)
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier")
        }
    }

    convertToString(eDataType: ecore.EDataType, instanceValue: any): string {
        switch (eDataType.classifierID) {
            case LibraryConstants.BOOK_CATEGORY:
                return this.convertBookCategoryToString(eDataType, instanceValue)
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier")
        }
    }

    createBookCategoryFromString(eDataType: ecore.EDataType, literalValue: string): any {
        return bookCategoryFromString(literalValue)
    }

    convertBookCategoryToString(eDataType: ecore.EDataType, instanceValue: any): string {
        return bookCategoryToString(instanceValue as BookCategory)
    }
}
