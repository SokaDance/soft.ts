// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import { Borrower, Lendable, LibraryConstants, Person, PersonImpl, getLibraryPackage } from "./internal.js"

export class BorrowerImpl extends PersonImpl implements Borrower {
    protected _borrowed: ecore.EList<Lendable>

    constructor() {
        super()
        this._borrowed = null
    }

    eStaticClass(): ecore.EClass {
        return getLibraryPackage().getBorrower()
    }

    // get the value of borrowed
    get borrowed(): ecore.EList<Lendable> {
        return this.getBorrowed()
    }

    // set the value of borrowed
    set borrowed(newBorrowed: ecore.EList<Lendable>) {
        const l = this.getBorrowed()
        l.clear()
        l.addAll(newBorrowed)
    }

    // get the value of borrowed
    getBorrowed(): ecore.EList<Lendable> {
        if (this._borrowed == null) {
            this._borrowed = new ecore.BasicEObjectList<Lendable>(
                this,
                LibraryConstants.BORROWER__BORROWED,
                LibraryConstants.LENDABLE__BORROWERS,
                false,
                true,
                true,
                true,
                false
            )
        }
        return this._borrowed
    }

    // set the value of borrowed
    setBorrowed(newBorrowed: ecore.EList<Lendable>) {
        const l = this.getBorrowed()
        l.clear()
        l.addAll(newBorrowed)
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case LibraryConstants.BORROWER__BORROWED: {
                const list = this.getBorrowed()
                return !resolve && ecore.isEObjectList(list) ? list.getUnResolvedList() : list
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    async eGetFromIDAsync(featureID: number, resolve: boolean): Promise<any> {
        return this.eGetFromID(featureID, resolve)
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case LibraryConstants.BORROWER__BORROWED: {
                const list = this.getBorrowed()
                list.clear()
                list.addAll(newValue as ecore.EList<Lendable>)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case LibraryConstants.BORROWER__BORROWED: {
                this.getBorrowed().clear()
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case LibraryConstants.BORROWER__BORROWED: {
                return this._borrowed && !this._borrowed.isEmpty()
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eBasicInverseAdd(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case LibraryConstants.BORROWER__BORROWED: {
                const list = this.getBorrowed() as ecore.ENotifyingList<Lendable>
                const end = otherEnd as Lendable
                return list.addWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case LibraryConstants.BORROWER__BORROWED: {
                const list = this.getBorrowed() as ecore.ENotifyingList<Lendable>
                const end = otherEnd as Lendable
                return list.removeWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
