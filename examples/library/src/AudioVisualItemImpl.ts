// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import {
    AudioVisualItem,
    CirculatingItem,
    CirculatingItemImpl,
    LibraryConstants,
    getLibraryPackage
} from "./internal.js"

export class AudioVisualItemImpl extends CirculatingItemImpl implements AudioVisualItem {
    protected _isDamaged: boolean
    protected _title: string
    protected _minutesLength: number

    constructor() {
        super()
        this._isDamaged = false
        this._minutesLength = 0
        this._title = ""
    }

    eStaticClass(): ecore.EClass {
        return getLibraryPackage().getAudioVisualItem()
    }

    // get the value of damaged
    get isDamaged(): boolean {
        return this.getDamaged()
    }

    // set the value of damaged
    set isDamaged(newIsDamaged: boolean) {
        this.setDamaged(newIsDamaged)
    }

    // get the value of minutesLength
    get minutesLength(): number {
        return this.getMinutesLength()
    }

    // set the value of minutesLength
    set minutesLength(newMinutesLength: number) {
        this.setMinutesLength(newMinutesLength)
    }

    // get the value of title
    get title(): string {
        return this.getTitle()
    }

    // set the value of title
    set title(newTitle: string) {
        this.setTitle(newTitle)
    }

    // get the value of damaged
    getDamaged(): boolean {
        return this._isDamaged
    }

    // set the value of damaged
    setDamaged(newIsDamaged: boolean): void {
        const oldIsDamaged = this._isDamaged
        this._isDamaged = newIsDamaged
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.AUDIO_VISUAL_ITEM__DAMAGED,
                    oldIsDamaged,
                    newIsDamaged
                )
            )
        }
    }

    // get the value of minutesLength
    getMinutesLength(): number {
        return this._minutesLength
    }

    // set the value of minutesLength
    setMinutesLength(newMinutesLength: number): void {
        const oldMinutesLength = this._minutesLength
        this._minutesLength = newMinutesLength
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.AUDIO_VISUAL_ITEM__MINUTES_LENGTH,
                    oldMinutesLength,
                    newMinutesLength
                )
            )
        }
    }

    // get the value of title
    getTitle(): string {
        return this._title
    }

    // set the value of title
    setTitle(newTitle: string): void {
        const oldTitle = this._title
        this._title = newTitle
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.AUDIO_VISUAL_ITEM__TITLE,
                    oldTitle,
                    newTitle
                )
            )
        }
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case LibraryConstants.AUDIO_VISUAL_ITEM__DAMAGED: {
                return this.getDamaged()
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__MINUTES_LENGTH: {
                return this.getMinutesLength()
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__TITLE: {
                return this.getTitle()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    async eGetFromIDAsync(featureID: number, resolve: boolean): Promise<any> {
        return this.eGetFromID(featureID, resolve)
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case LibraryConstants.AUDIO_VISUAL_ITEM__DAMAGED: {
                this.setDamaged(newValue as boolean)
                break
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__MINUTES_LENGTH: {
                this.setMinutesLength(newValue as number)
                break
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__TITLE: {
                this.setTitle(newValue as string)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case LibraryConstants.AUDIO_VISUAL_ITEM__DAMAGED: {
                this.setDamaged(false)
                break
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__MINUTES_LENGTH: {
                this.setMinutesLength(0)
                break
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__TITLE: {
                this.setTitle("")
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case LibraryConstants.AUDIO_VISUAL_ITEM__DAMAGED: {
                return this._isDamaged != false
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__MINUTES_LENGTH: {
                return this._minutesLength != 0
            }
            case LibraryConstants.AUDIO_VISUAL_ITEM__TITLE: {
                return this._title != ""
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
}
