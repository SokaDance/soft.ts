// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import { Addressable, LibraryConstants, Person, getLibraryPackage } from "./internal.js"

export class PersonImpl extends ecore.EObjectImpl implements Person {
    protected _firstName: string
    protected _address: string
    protected _lastName: string

    constructor() {
        super()
        this._address = ""
        this._firstName = ""
        this._lastName = ""
    }

    eStaticClass(): ecore.EClass {
        return getLibraryPackage().getPerson()
    }

    // get the value of address
    get address(): string {
        return this.getAddress()
    }

    // set the value of address
    set address(newAddress: string) {
        this.setAddress(newAddress)
    }

    // get the value of firstName
    get firstName(): string {
        return this.getFirstName()
    }

    // set the value of firstName
    set firstName(newFirstName: string) {
        this.setFirstName(newFirstName)
    }

    // get the value of lastName
    get lastName(): string {
        return this.getLastName()
    }

    // set the value of lastName
    set lastName(newLastName: string) {
        this.setLastName(newLastName)
    }

    // get the value of address
    getAddress(): string {
        return this._address
    }

    // set the value of address
    setAddress(newAddress: string): void {
        let oldAddress = this._address
        this._address = newAddress
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.PERSON__ADDRESS,
                    oldAddress,
                    newAddress
                )
            )
        }
    }

    // get the value of firstName
    getFirstName(): string {
        return this._firstName
    }

    // set the value of firstName
    setFirstName(newFirstName: string): void {
        let oldFirstName = this._firstName
        this._firstName = newFirstName
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.PERSON__FIRST_NAME,
                    oldFirstName,
                    newFirstName
                )
            )
        }
    }

    // get the value of lastName
    getLastName(): string {
        return this._lastName
    }

    // set the value of lastName
    setLastName(newLastName: string): void {
        let oldLastName = this._lastName
        this._lastName = newLastName
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    LibraryConstants.PERSON__LAST_NAME,
                    oldLastName,
                    newLastName
                )
            )
        }
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case LibraryConstants.PERSON__ADDRESS: {
                return this.getAddress()
            }
            case LibraryConstants.PERSON__FIRST_NAME: {
                return this.getFirstName()
            }
            case LibraryConstants.PERSON__LAST_NAME: {
                return this.getLastName()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    async eGetFromIDAsync(featureID: number, resolve: boolean): Promise<any> {
        return this.eGetFromID(featureID, resolve)
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case LibraryConstants.PERSON__ADDRESS: {
                this.setAddress(newValue as string)
                break
            }
            case LibraryConstants.PERSON__FIRST_NAME: {
                this.setFirstName(newValue as string)
                break
            }
            case LibraryConstants.PERSON__LAST_NAME: {
                this.setLastName(newValue as string)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case LibraryConstants.PERSON__ADDRESS: {
                this.setAddress("")
                break
            }
            case LibraryConstants.PERSON__FIRST_NAME: {
                this.setFirstName("")
                break
            }
            case LibraryConstants.PERSON__LAST_NAME: {
                this.setLastName("")
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case LibraryConstants.PERSON__ADDRESS: {
                return this._address != ""
            }
            case LibraryConstants.PERSON__FIRST_NAME: {
                return this._firstName != ""
            }
            case LibraryConstants.PERSON__LAST_NAME: {
                return this._lastName != ""
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
}
