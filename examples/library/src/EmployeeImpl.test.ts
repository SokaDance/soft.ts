// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import { describe, expect, test } from "vitest"
import { anything, capture, instance, mock, reset, verify, when } from "ts-mockito"
import * as ecore from "@masagroup/ecore"
import { Employee, EmployeeImpl, LibraryConstants, Person, getLibraryPackage } from "./internal.js"

interface EmployeeInternal extends Employee, ecore.EObjectInternal {}

describe("EmployeeImpl", () => {
    test("eStaticClass", () => {
        const o = new EmployeeImpl()
        expect(o.eStaticClass()).toBe(getLibraryPackage().getEmployee())
    })

    test("getManager", () => {
        const o = new EmployeeImpl()

        // get default value
        expect(o.manager).toBeNull()

        // initialize object with a mock value
        const mockValue = mock<EmployeeInternal>()
        const value = instance(mockValue)
        o.manager = value

        // events
        const mockAdapter = mock<ecore.EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set object resource
        const mockResourceSet = mock<ecore.EResourceSet>()
        const resourceSet = instance(mockResourceSet)
        const mockResource = mock<ecore.EResource>()
        const resource = instance(mockResource)
        o.eSetInternalResource(resource)

        // get non resolved value
        when(mockValue.eIsProxy()).thenReturn(false)
        expect(o.manager).toBe(value)
        verify(mockValue.eIsProxy()).once()

        // get a resolved value
        const mockURI = new ecore.URI("test:///uri")
        const mockResolved = mock<EmployeeInternal>()
        const resolved = instance(mockResolved)
        when(mockResolved.eProxyURI()).thenReturn(null)
        when(mockResource.eResourceSet()).thenReturn(resourceSet)
        when(mockResourceSet.getEObject(mockURI, true)).thenReturn(resolved)
        when(mockValue.eIsProxy()).thenReturn(true)
        when(mockValue.eProxyURI()).thenReturn(mockURI)
        expect(o.manager).toBe(resolved)
    })

    test("setManager", () => {
        const o = new EmployeeImpl()
        const mockValue = mock<EmployeeInternal>()
        const value = instance(mockValue)

        // add listener
        const mockAdapter = mock<ecore.EAdapter>()
        const adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set value
        o.manager = value

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("eGetFromID", () => {
        const o = new EmployeeImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(LibraryConstants.EMPLOYEE__MANAGER, true)).toStrictEqual(o.manager)
    })

    test("eSetFromID", () => {
        const o = new EmployeeImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            const mockValue = mock<EmployeeInternal>()
            const value = instance(mockValue)
            o.eSetFromID(LibraryConstants.EMPLOYEE__MANAGER, value)
            expect(o.eGetFromID(LibraryConstants.EMPLOYEE__MANAGER, false)).toBe(value)
        }
    })

    test("eIsSetFromID", () => {
        const o = new EmployeeImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(LibraryConstants.EMPLOYEE__MANAGER)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        const o = new EmployeeImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(LibraryConstants.EMPLOYEE__MANAGER)
            expect(o.eGetFromID(LibraryConstants.EMPLOYEE__MANAGER, false)).toBeNull()
        }
    })
})
