// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import { describe, expect, test } from "vitest"
import { anything, capture, instance, mock, reset, verify, when } from "ts-mockito"
import * as ecore from "@masagroup/ecore"
import { Group, NamedElement, TeamImpl, TournamentConstants, getTournamentPackage } from "./internal.js"

interface GroupInternal extends Group, ecore.EObjectInternal {}

describe("TeamImpl", () => {
    test("eStaticClass", () => {
        let o = new TeamImpl()
        expect(o.eStaticClass()).toBe(getTournamentPackage().getTeam())
    })

    test("getGroup", () => {
        let o = new TeamImpl()

        // get default value
        expect(o.getGroup()).toBeNull()

        // initialize object with a mock value
        let mockValue = mock<GroupInternal>()
        let value = instance(mockValue)
        o.setGroup(value)

        // events
        let mockAdapter = mock<ecore.EAdapter>()
        let adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // set object resource
        let mockResourceSet = mock<ecore.EResourceSet>()
        let resourceSet = instance(mockResourceSet)
        let mockResource = mock<ecore.EResource>()
        let resource = instance(mockResource)
        o.eSetInternalResource(resource)

        // get non resolved value
        when(mockValue.eIsProxy()).thenReturn(false)
        expect(o.getGroup()).toBe(value)
        verify(mockValue.eIsProxy()).once()

        // get a resolved value
        let mockURI = new ecore.URI("test:///uri")
        let mockResolved = mock<GroupInternal>()
        let resolved = instance(mockResolved)
        when(mockResolved.eProxyURI()).thenReturn(null)
        when(mockResource.eResourceSet()).thenReturn(resourceSet)
        when(mockResourceSet.getEObject(mockURI, true)).thenReturn(resolved)
        when(mockValue.eIsProxy()).thenReturn(true)
        when(mockValue.eProxyURI()).thenReturn(mockURI)
        expect(o.getGroup()).toBe(resolved)
    })

    test("setGroup", () => {
        let o = new TeamImpl()

        // add listener
        let mockAdapter = mock<ecore.EAdapter>()
        let adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // first value
        let mockValue = mock<GroupInternal>()
        let value = instance(mockValue)
        when(mockValue.eInverseAdd(o, TournamentConstants.GROUP__TEAMS, null)).thenReturn(null)
        o.setGroup(value)
        verify(mockAdapter.notifyChanged(anything())).once()
        {
            let [notification] = capture(mockAdapter.notifyChanged).last()
            expect(notification.getNotifier()).toBe(o)
            expect(notification.getOldValue()).toBeNull()
            expect(notification.getNewValue()).toBe(value)
        }

        // set with other value
        let mockOther = mock<GroupInternal>()
        let other = instance(mockOther)
        reset(mockAdapter)
        reset(mockValue)
        when(mockValue.eInverseRemove(o, TournamentConstants.GROUP__TEAMS, null)).thenReturn(null)
        when(mockOther.eInverseAdd(o, TournamentConstants.GROUP__TEAMS, null)).thenReturn(null)
        o.setGroup(other)
        verify(mockAdapter.notifyChanged(anything())).once()
        {
            let [notification] = capture(mockAdapter.notifyChanged).last()
            expect(notification.getNotifier()).toBe(o)
            expect(notification.getOldValue()).toBe(value)
            expect(notification.getNewValue()).toBe(other)
            expect(notification.getPosition()).toBe(-1)
        }
    })

    test("basicSetGroup", () => {
        let o = new TeamImpl()
        let mockValue = mock<GroupInternal>()
        let value = instance(mockValue)

        // add listener
        let mockAdapter = mock<ecore.EAdapter>()
        let adapter = instance(mockAdapter)
        o.eAdapters().add(adapter)

        // notification chain
        let mockNotifications = mock<ecore.ENotificationChain>()
        let notifications = instance(mockNotifications)

        // set value
        when(mockNotifications.add(anything())).thenReturn(true)
        o.basicSetGroup(value, notifications)

        // checks
        verify(mockNotifications.add(anything())).once()
        const [notification] = capture(mockNotifications.add).last()
        expect(notification.getNotifier()).toBe(o)
        expect(notification.getEventType()).toBe(ecore.EventType.SET)
        expect(notification.getFeatureID()).toBe(TournamentConstants.TEAM__GROUP)
        expect(notification.getOldValue()).toBeNull()
        expect(notification.getNewValue()).toBe(value)
        expect(notification.getPosition()).toBe(-1)
    })

    test("eGetFromID", () => {
        let o = new TeamImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(TournamentConstants.TEAM__GROUP, true)).toStrictEqual(o.getGroup())
    })

    test("eSetFromID", () => {
        let o = new TeamImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            let mockValue = mock<GroupInternal>()
            let value = instance(mockValue)
            when(mockValue.eInverseAdd(o, TournamentConstants.GROUP__TEAMS, null)).thenReturn(null)
            o.eSetFromID(TournamentConstants.TEAM__GROUP, value)
            expect(o.eGetFromID(TournamentConstants.TEAM__GROUP, false)).toBe(value)
            verify(mockValue.eInverseAdd(o, TournamentConstants.GROUP__TEAMS, null)).once()
        }
    })

    test("eIsSetFromID", () => {
        let o = new TeamImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(TournamentConstants.TEAM__GROUP)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        let o = new TeamImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(TournamentConstants.TEAM__GROUP)
            expect(o.eGetFromID(TournamentConstants.TEAM__GROUP, false)).toBeNull()
        }
    })

    test("eBasicInverseAdd", () => {
        let o = new TeamImpl()
        {
            let mockObject = mock<ecore.EObject>()
            let object = instance(mockObject)
            let mockNotifications = mock<ecore.ENotificationChain>()
            let notifications = instance(mockNotifications)
            expect(o.eBasicInverseAdd(object, -1, notifications)).toBe(notifications)
        }
        {
            let mockValue = mock<GroupInternal>()
            let value = instance(mockValue)
            when(mockValue.eIsProxy()).thenReturn(false)
            o.eBasicInverseAdd(value, TournamentConstants.TEAM__GROUP, null)
            expect(o.getGroup()).toBe(value)

            reset(mockValue)
            let mockOther = mock<GroupInternal>()
            let other = instance(mockOther)
            when(mockOther.eIsProxy()).thenReturn(false)
            when(mockValue.eInverseRemove(o, TournamentConstants.GROUP__TEAMS, null)).thenReturn(null)
            o.eBasicInverseAdd(other, TournamentConstants.TEAM__GROUP, null)
            expect(o.getGroup()).toBe(other)
        }
    })

    test("eBasicInverseRemove", () => {
        let o = new TeamImpl()
        {
            let mockObject = mock<ecore.EObject>()
            let object = instance(mockObject)
            let mockNotifications = mock<ecore.ENotificationChain>()
            let notifications = instance(mockNotifications)
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications)
        }
        {
            let mockValue = mock<GroupInternal>()
            let value = instance(mockValue)
            o.eBasicInverseRemove(value, TournamentConstants.TEAM__GROUP, null)
        }
    })
})
