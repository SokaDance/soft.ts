// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import { Group, Match, MatchKind, Team, TournamentConstants, getTournamentPackage } from "./internal.js"

export class MatchImpl extends ecore.EObjectImpl implements Match {
    protected _kind: MatchKind
    protected _homeTeam: Team
    protected _guestTeam: Team
    protected _result: string
    protected _date: Date
    protected _group: Group
    protected _location: string

    constructor() {
        super()
        this._date = null
        this._group = null
        this._guestTeam = null
        this._homeTeam = null
        this._kind = MatchKind.ROUND_OF32
        this._location = ""
        this._result = ""
    }

    eStaticClass(): ecore.EClass {
        return getTournamentPackage().getMatch()
    }

    // get the value of date
    getDate(): Date {
        return this._date
    }

    // set the value of date
    setDate(newDate: Date): void {
        const oldDate = this._date
        this._date = newDate
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(this, ecore.EventType.SET, TournamentConstants.MATCH__DATE, oldDate, newDate)
            )
        }
    }

    // get the value of group
    getGroup(): Group {
        if (this._group != null && this._group.eIsProxy()) {
            const oldGroup = this._group
            const newGroup = this.eResolveProxy(oldGroup) as Group
            this._group = newGroup
            if (newGroup != oldGroup) {
                if (this.eNotificationRequired()) {
                    this.eNotify(
                        new ecore.Notification(
                            this,
                            ecore.EventType.RESOLVE,
                            TournamentConstants.MATCH__GROUP,
                            oldGroup,
                            newGroup
                        )
                    )
                }
            }
        }
        return this._group
    }

    // get the value of group asynchronously
    async getGroupAsync(): Promise<Group> {
        if (this._group != null && this._group.eIsProxy()) {
            const oldGroup = this._group
            const newGroup = (await this.eResolveProxyAsync(oldGroup)) as Group
            this._group = newGroup
            if (newGroup != oldGroup) {
                if (this.eNotificationRequired()) {
                    this.eNotify(
                        new ecore.Notification(
                            this,
                            ecore.EventType.RESOLVE,
                            TournamentConstants.MATCH__GROUP,
                            oldGroup,
                            newGroup
                        )
                    )
                }
            }
        }
        return this._group
    }

    // set the value of group
    setGroup(newGroup: Group): void {
        const oldGroup = this._group
        this._group = newGroup
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(this, ecore.EventType.SET, TournamentConstants.MATCH__GROUP, oldGroup, newGroup)
            )
        }
    }

    // get the basic value of group with no proxy resolution
    basicGetGroup(): Group {
        return this._group
    }

    // get the value of guestTeam
    getGuestTeam(): Team {
        if (this._guestTeam != null && this._guestTeam.eIsProxy()) {
            const oldGuestTeam = this._guestTeam
            const newGuestTeam = this.eResolveProxy(oldGuestTeam) as Team
            this._guestTeam = newGuestTeam
            if (newGuestTeam != oldGuestTeam) {
                if (this.eNotificationRequired()) {
                    this.eNotify(
                        new ecore.Notification(
                            this,
                            ecore.EventType.RESOLVE,
                            TournamentConstants.MATCH__GUEST_TEAM,
                            oldGuestTeam,
                            newGuestTeam
                        )
                    )
                }
            }
        }
        return this._guestTeam
    }

    // get the value of guestTeam asynchronously
    async getGuestTeamAsync(): Promise<Team> {
        if (this._guestTeam != null && this._guestTeam.eIsProxy()) {
            const oldGuestTeam = this._guestTeam
            const newGuestTeam = (await this.eResolveProxyAsync(oldGuestTeam)) as Team
            this._guestTeam = newGuestTeam
            if (newGuestTeam != oldGuestTeam) {
                if (this.eNotificationRequired()) {
                    this.eNotify(
                        new ecore.Notification(
                            this,
                            ecore.EventType.RESOLVE,
                            TournamentConstants.MATCH__GUEST_TEAM,
                            oldGuestTeam,
                            newGuestTeam
                        )
                    )
                }
            }
        }
        return this._guestTeam
    }

    // set the value of guestTeam
    setGuestTeam(newGuestTeam: Team): void {
        const oldGuestTeam = this._guestTeam
        this._guestTeam = newGuestTeam
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    TournamentConstants.MATCH__GUEST_TEAM,
                    oldGuestTeam,
                    newGuestTeam
                )
            )
        }
    }

    // get the basic value of guestTeam with no proxy resolution
    basicGetGuestTeam(): Team {
        return this._guestTeam
    }

    // get the value of homeTeam
    getHomeTeam(): Team {
        if (this._homeTeam != null && this._homeTeam.eIsProxy()) {
            const oldHomeTeam = this._homeTeam
            const newHomeTeam = this.eResolveProxy(oldHomeTeam) as Team
            this._homeTeam = newHomeTeam
            if (newHomeTeam != oldHomeTeam) {
                if (this.eNotificationRequired()) {
                    this.eNotify(
                        new ecore.Notification(
                            this,
                            ecore.EventType.RESOLVE,
                            TournamentConstants.MATCH__HOME_TEAM,
                            oldHomeTeam,
                            newHomeTeam
                        )
                    )
                }
            }
        }
        return this._homeTeam
    }

    // get the value of homeTeam asynchronously
    async getHomeTeamAsync(): Promise<Team> {
        if (this._homeTeam != null && this._homeTeam.eIsProxy()) {
            const oldHomeTeam = this._homeTeam
            const newHomeTeam = (await this.eResolveProxyAsync(oldHomeTeam)) as Team
            this._homeTeam = newHomeTeam
            if (newHomeTeam != oldHomeTeam) {
                if (this.eNotificationRequired()) {
                    this.eNotify(
                        new ecore.Notification(
                            this,
                            ecore.EventType.RESOLVE,
                            TournamentConstants.MATCH__HOME_TEAM,
                            oldHomeTeam,
                            newHomeTeam
                        )
                    )
                }
            }
        }
        return this._homeTeam
    }

    // set the value of homeTeam
    setHomeTeam(newHomeTeam: Team): void {
        const oldHomeTeam = this._homeTeam
        this._homeTeam = newHomeTeam
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    TournamentConstants.MATCH__HOME_TEAM,
                    oldHomeTeam,
                    newHomeTeam
                )
            )
        }
    }

    // get the basic value of homeTeam with no proxy resolution
    basicGetHomeTeam(): Team {
        return this._homeTeam
    }

    // get the value of kind
    getKind(): MatchKind {
        return this._kind
    }

    // set the value of kind
    setKind(newKind: MatchKind): void {
        const oldKind = this._kind
        this._kind = newKind
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(this, ecore.EventType.SET, TournamentConstants.MATCH__KIND, oldKind, newKind)
            )
        }
    }

    // get the value of location
    getLocation(): string {
        return this._location
    }

    // set the value of location
    setLocation(newLocation: string): void {
        const oldLocation = this._location
        this._location = newLocation
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    TournamentConstants.MATCH__LOCATION,
                    oldLocation,
                    newLocation
                )
            )
        }
    }

    // get the value of result
    getResult(): string {
        return this._result
    }

    // set the value of result
    setResult(newResult: string): void {
        const oldResult = this._result
        this._result = newResult
        if (this.eNotificationRequired()) {
            this.eNotify(
                new ecore.Notification(
                    this,
                    ecore.EventType.SET,
                    TournamentConstants.MATCH__RESULT,
                    oldResult,
                    newResult
                )
            )
        }
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case TournamentConstants.MATCH__DATE: {
                return this.getDate()
            }
            case TournamentConstants.MATCH__GROUP: {
                return resolve ? this.getGroup() : this.basicGetGroup()
            }
            case TournamentConstants.MATCH__GUEST_TEAM: {
                return resolve ? this.getGuestTeam() : this.basicGetGuestTeam()
            }
            case TournamentConstants.MATCH__HOME_TEAM: {
                return resolve ? this.getHomeTeam() : this.basicGetHomeTeam()
            }
            case TournamentConstants.MATCH__KIND: {
                return this.getKind()
            }
            case TournamentConstants.MATCH__LOCATION: {
                return this.getLocation()
            }
            case TournamentConstants.MATCH__RESULT: {
                return this.getResult()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    async eGetFromIDAsync(featureID: number, resolve: boolean): Promise<any> {
        if (resolve) {
            switch (featureID) {
                case TournamentConstants.MATCH__GROUP:
                    return this.getGroupAsync()
                case TournamentConstants.MATCH__GUEST_TEAM:
                    return this.getGuestTeamAsync()
                case TournamentConstants.MATCH__HOME_TEAM:
                    return this.getHomeTeamAsync()
            }
        }
        return this.eGetFromID(featureID, resolve)
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case TournamentConstants.MATCH__DATE: {
                this.setDate(newValue as Date)
                break
            }
            case TournamentConstants.MATCH__GROUP: {
                this.setGroup(newValue as Group)
                break
            }
            case TournamentConstants.MATCH__GUEST_TEAM: {
                this.setGuestTeam(newValue as Team)
                break
            }
            case TournamentConstants.MATCH__HOME_TEAM: {
                this.setHomeTeam(newValue as Team)
                break
            }
            case TournamentConstants.MATCH__KIND: {
                this.setKind(newValue as MatchKind)
                break
            }
            case TournamentConstants.MATCH__LOCATION: {
                this.setLocation(newValue as string)
                break
            }
            case TournamentConstants.MATCH__RESULT: {
                this.setResult(newValue as string)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case TournamentConstants.MATCH__DATE: {
                this.setDate(null)
                break
            }
            case TournamentConstants.MATCH__GROUP: {
                this.setGroup(null)
                break
            }
            case TournamentConstants.MATCH__GUEST_TEAM: {
                this.setGuestTeam(null)
                break
            }
            case TournamentConstants.MATCH__HOME_TEAM: {
                this.setHomeTeam(null)
                break
            }
            case TournamentConstants.MATCH__KIND: {
                this.setKind(MatchKind.ROUND_OF32)
                break
            }
            case TournamentConstants.MATCH__LOCATION: {
                this.setLocation("")
                break
            }
            case TournamentConstants.MATCH__RESULT: {
                this.setResult("")
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case TournamentConstants.MATCH__DATE: {
                return this._date != null
            }
            case TournamentConstants.MATCH__GROUP: {
                return this._group != null
            }
            case TournamentConstants.MATCH__GUEST_TEAM: {
                return this._guestTeam != null
            }
            case TournamentConstants.MATCH__HOME_TEAM: {
                return this._homeTeam != null
            }
            case TournamentConstants.MATCH__KIND: {
                return this._kind != MatchKind.ROUND_OF32
            }
            case TournamentConstants.MATCH__LOCATION: {
                return this._location != ""
            }
            case TournamentConstants.MATCH__RESULT: {
                return this._result != ""
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
}
