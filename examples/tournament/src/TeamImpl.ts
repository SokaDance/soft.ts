// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import { Group, NamedElement, NamedElementImpl, Team, TournamentConstants, getTournamentPackage } from "./internal.js"

export class TeamImpl extends NamedElementImpl implements Team {
    protected _group: Group

    constructor() {
        super()
        this._group = null
    }

    eStaticClass(): ecore.EClass {
        return getTournamentPackage().getTeam()
    }

    // get the value of group
    getGroup(): Group {
        if (this._group != null && this._group.eIsProxy()) {
            let oldGroup = this._group
            let newGroup = this.eResolveProxy(oldGroup) as Group
            this._group = newGroup
            if (newGroup != oldGroup) {
                if (this.eNotificationRequired()) {
                    this.eNotify(
                        new ecore.Notification(
                            this,
                            ecore.EventType.RESOLVE,
                            TournamentConstants.TEAM__GROUP,
                            oldGroup,
                            newGroup
                        )
                    )
                }
            }
        }
        return this._group
    }

    // set the value of group
    setGroup(newGroup: Group): void {
        let oldGroup = this._group
        if (newGroup != oldGroup) {
            let notifications: ecore.ENotificationChain = null
            if (ecore.isEObjectInternal(oldGroup)) {
                notifications = oldGroup.eInverseRemove(this, TournamentConstants.GROUP__TEAMS, notifications)
            }
            if (ecore.isEObjectInternal(newGroup)) {
                notifications = newGroup.eInverseAdd(this, TournamentConstants.GROUP__TEAMS, notifications)
            }
            notifications = this.basicSetGroup(newGroup, notifications)
            if (notifications != null) {
                notifications.dispatch()
            }
        }
    }

    // get the basic value of group with no proxy resolution
    basicGetGroup(): Group {
        return this._group
    }

    basicSetGroup(newGroup: Group, msgs: ecore.ENotificationChain): ecore.ENotificationChain {
        let oldGroup = this._group
        this._group = newGroup
        let notifications = msgs
        if (this.eNotificationRequired()) {
            let notification = new ecore.Notification(
                this,
                ecore.EventType.SET,
                TournamentConstants.TEAM__GROUP,
                oldGroup,
                newGroup
            )
            if (notifications != null) {
                notifications.add(notification)
            } else {
                notifications = notification
            }
        }
        return notifications
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case TournamentConstants.TEAM__GROUP: {
                return resolve ? this.getGroup() : this.basicGetGroup()
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case TournamentConstants.TEAM__GROUP: {
                this.setGroup(newValue as Group)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case TournamentConstants.TEAM__GROUP: {
                this.setGroup(null)
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case TournamentConstants.TEAM__GROUP: {
                return this._group != null
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eBasicInverseAdd(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case TournamentConstants.TEAM__GROUP: {
                let msgs = notifications
                const group = this.basicGetGroup()
                if (ecore.isEObjectInternal(group)) {
                    msgs = group.eInverseRemove(this, TournamentConstants.GROUP__TEAMS, msgs)
                }
                return this.basicSetGroup(otherEnd as Group, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case TournamentConstants.TEAM__GROUP: {
                return this.basicSetGroup(null, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
