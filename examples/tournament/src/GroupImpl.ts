// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as ecore from "@masagroup/ecore"
import { Group, NamedElement, NamedElementImpl, Team, TournamentConstants, getTournamentPackage } from "./internal.js"

export class GroupImpl extends NamedElementImpl implements Group {
    protected _teams: ecore.EList<Team>

    constructor() {
        super()
        this._teams = null
    }

    eStaticClass(): ecore.EClass {
        return getTournamentPackage().getGroup()
    }

    // get the value of teams
    getTeams(): ecore.EList<Team> {
        if (this._teams == null) {
            this._teams = new ecore.BasicEObjectList<Team>(
                this,
                TournamentConstants.GROUP__TEAMS,
                TournamentConstants.TEAM__GROUP,
                false,
                true,
                true,
                true,
                false
            )
        }
        return this._teams
    }

    // set the value of teams
    setTeams(newTeams: ecore.EList<Team>) {
        const l = this.getTeams()
        l.clear()
        l.addAll(newTeams)
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case TournamentConstants.GROUP__TEAMS: {
                const list = this.getTeams()
                return !resolve && ecore.isEObjectList(list) ? list.getUnResolvedList() : list
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case TournamentConstants.GROUP__TEAMS: {
                const list = this.getTeams()
                list.clear()
                list.addAll(newValue as ecore.EList<Team>)
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case TournamentConstants.GROUP__TEAMS: {
                this.getTeams().clear()
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case TournamentConstants.GROUP__TEAMS: {
                return this._teams && !this._teams.isEmpty()
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eBasicInverseAdd(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case TournamentConstants.GROUP__TEAMS: {
                let list = this.getTeams() as ecore.ENotifyingList<Team>
                let end = otherEnd as Team
                return list.addWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(
        otherEnd: ecore.EObject,
        featureID: number,
        notifications: ecore.ENotificationChain
    ): ecore.ENotificationChain {
        switch (featureID) {
            case TournamentConstants.GROUP__TEAMS: {
                let list = this.getTeams() as ecore.ENotifyingList<Team>
                let end = otherEnd as Team
                return list.removeWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
