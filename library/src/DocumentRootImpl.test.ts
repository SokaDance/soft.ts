// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import * as deepEqual from "deep-equal";
import { anything, capture, instance, mock, reset, verify, when } from "ts-mockito";
import * as ecore from "@masagroup/ecore";
import { DocumentRootImpl, Library, LibraryConstants, getLibraryPackage } from "./internal";

interface EStringToStringMapEntryInternal
    extends ecore.EStringToStringMapEntry,
        ecore.EObjectInternal {}
interface LibraryInternal extends Library, ecore.EObjectInternal {}

describe("DocumentRootImpl", () => {
    test("eStaticClass", () => {
        let o = new DocumentRootImpl();
        expect(o.eStaticClass()).toBe(getLibraryPackage().getDocumentRoot());
    });

    test("getLibrary", () => {
        let o = new DocumentRootImpl();

        // get default value
        expect(o.library).toBeNull();
    });

    test("setLibrary", () => {
        let o = new DocumentRootImpl();
        let mockValue = mock<LibraryInternal>();
        let value = instance(mockValue);

        // add listener
        let mockAdapter = mock<ecore.EAdapter>();
        let adapter = instance(mockAdapter);
        o.eAdapters.add(adapter);

        // set value
        o.library = value;

        // checks
        verify(mockAdapter.notifyChanged(anything())).once();
        const [notification] = capture(mockAdapter.notifyChanged).last();
        expect(notification.notifier).toBe(o);
        expect(notification.oldValue).toBeNull();
        expect(notification.newValue).toBe(value);
        expect(notification.position).toBe(-1);
    });

    test("basicSetLibrary", () => {
        let o = new DocumentRootImpl();
        let mockValue = mock<LibraryInternal>();
        let value = instance(mockValue);

        // add listener
        let mockAdapter = mock<ecore.EAdapter>();
        let adapter = instance(mockAdapter);
        o.eAdapters.add(adapter);

        // notification chain
        let mockNotifications = mock<ecore.ENotificationChain>();
        let notifications = instance(mockNotifications);

        // set value
        when(mockNotifications.add(anything())).thenReturn(true);
        o.basicSetLibrary(value, notifications);

        // checks
        verify(mockNotifications.add(anything())).once();
        const [notification] = capture(mockNotifications.add).last();
        expect(notification.notifier).toBe(o);
        expect(notification.eventType).toBe(ecore.EventType.SET);
        expect(notification.featureID).toBe(LibraryConstants.DOCUMENT_ROOT__LIBRARY);
        expect(notification.oldValue).toBeNull();
        expect(notification.newValue).toBe(value);
        expect(notification.position).toBe(-1);
    });

    test("getXMLNSPrefixMap", () => {
        let o = new DocumentRootImpl();
        expect(o.xMLNSPrefixMap).not.toBeNull();
    });

    test("getXSISchemaLocation", () => {
        let o = new DocumentRootImpl();
        expect(o.xSISchemaLocation).not.toBeNull();
    });

    test("eGetFromID", () => {
        let o = new DocumentRootImpl();
        expect(() => o.eGetFromID(-1, true)).toThrow(Error);
        expect(o.eGetFromID(LibraryConstants.DOCUMENT_ROOT__LIBRARY, true)).toStrictEqual(
            o.library
        );
        expect(o.eGetFromID(LibraryConstants.DOCUMENT_ROOT__XMLNS_PREFIX_MAP, true)).toStrictEqual(
            o.xMLNSPrefixMap
        );
        expect(
            o.eGetFromID(LibraryConstants.DOCUMENT_ROOT__XSI_SCHEMA_LOCATION, true)
        ).toStrictEqual(o.xSISchemaLocation);
    });

    test("eSetFromID", () => {
        let o = new DocumentRootImpl();
        expect(() => o.eSetFromID(-1, null)).toThrow(Error);
        {
            let mockValue = mock<LibraryInternal>();
            let value = instance(mockValue);
            when(
                mockValue.eInverseAdd(
                    o,
                    ecore.EOPPOSITE_FEATURE_BASE - LibraryConstants.DOCUMENT_ROOT__LIBRARY,
                    anything()
                )
            ).thenReturn(null);
            o.eSetFromID(LibraryConstants.DOCUMENT_ROOT__LIBRARY, value);
            expect(o.eGetFromID(LibraryConstants.DOCUMENT_ROOT__LIBRARY, false)).toBe(value);
            verify(
                mockValue.eInverseAdd(
                    o,
                    ecore.EOPPOSITE_FEATURE_BASE - LibraryConstants.DOCUMENT_ROOT__LIBRARY,
                    anything()
                )
            ).once();
        }
        {
            let mockMap = mock<ecore.EMap<string, string>>();
            let map = instance(mockMap);
            let mockIterator = mock<Iterator<ecore.EMapEntry<string, string>>>();
            let iterator = instance(mockIterator);
            let mockEntry = mock<ecore.EMapEntry<string, string>>();
            let entry = instance(mockEntry);
            let key = "Test String";
            let value = "Test String";
            when(mockMap[Symbol.iterator]()).thenReturn(iterator);
            when(mockIterator.next())
                .thenReturn({ value: entry, done: false })
                .thenReturn({ value: undefined, done: true });
            when(mockEntry.key).thenReturn(key);
            when(mockEntry.value).thenReturn(value);
            o.eSetFromID(LibraryConstants.DOCUMENT_ROOT__XMLNS_PREFIX_MAP, map);
            expect(o.xMLNSPrefixMap.toMap()).toEqual(new Map<string, string>([[key, value]]));
        }
        {
            let mockMap = mock<ecore.EMap<string, string>>();
            let map = instance(mockMap);
            let mockIterator = mock<Iterator<ecore.EMapEntry<string, string>>>();
            let iterator = instance(mockIterator);
            let mockEntry = mock<ecore.EMapEntry<string, string>>();
            let entry = instance(mockEntry);
            let key = "Test String";
            let value = "Test String";
            when(mockMap[Symbol.iterator]()).thenReturn(iterator);
            when(mockIterator.next())
                .thenReturn({ value: entry, done: false })
                .thenReturn({ value: undefined, done: true });
            when(mockEntry.key).thenReturn(key);
            when(mockEntry.value).thenReturn(value);
            o.eSetFromID(LibraryConstants.DOCUMENT_ROOT__XSI_SCHEMA_LOCATION, map);
            expect(o.xSISchemaLocation.toMap()).toEqual(new Map<string, string>([[key, value]]));
        }
    });

    test("eIsSetFromID", () => {
        let o = new DocumentRootImpl();
        expect(() => o.eIsSetFromID(-1)).toThrow(Error);
        expect(o.eIsSetFromID(LibraryConstants.DOCUMENT_ROOT__LIBRARY)).toBeFalsy();
        expect(o.eIsSetFromID(LibraryConstants.DOCUMENT_ROOT__XMLNS_PREFIX_MAP)).toBeFalsy();
        expect(o.eIsSetFromID(LibraryConstants.DOCUMENT_ROOT__XSI_SCHEMA_LOCATION)).toBeFalsy();
    });

    test("eUnsetFromID", () => {
        let o = new DocumentRootImpl();
        expect(() => o.eUnsetFromID(-1)).toThrow(Error);
        {
            o.eUnsetFromID(LibraryConstants.DOCUMENT_ROOT__LIBRARY);
            expect(o.eGetFromID(LibraryConstants.DOCUMENT_ROOT__LIBRARY, false)).toBeNull();
        }
        {
            o.eUnsetFromID(LibraryConstants.DOCUMENT_ROOT__XMLNS_PREFIX_MAP);
            let v = o.eGetFromID(LibraryConstants.DOCUMENT_ROOT__XMLNS_PREFIX_MAP, false);
            expect(v).not.toBeNull();
            let l = v as ecore.EList<ecore.EStringToStringMapEntry>;
            expect(l.isEmpty()).toBeTruthy();
        }
        {
            o.eUnsetFromID(LibraryConstants.DOCUMENT_ROOT__XSI_SCHEMA_LOCATION);
            let v = o.eGetFromID(LibraryConstants.DOCUMENT_ROOT__XSI_SCHEMA_LOCATION, false);
            expect(v).not.toBeNull();
            let l = v as ecore.EList<ecore.EStringToStringMapEntry>;
            expect(l.isEmpty()).toBeTruthy();
        }
    });

    test("eBasicInverseRemove", () => {
        let o = new DocumentRootImpl();
        {
            let mockObject = mock<ecore.EObject>();
            let object = instance(mockObject);
            let mockNotifications = mock<ecore.ENotificationChain>();
            let notifications = instance(mockNotifications);
            expect(o.eBasicInverseRemove(object, -1, notifications)).toBe(notifications);
        }
        {
            let mockValue = mock<LibraryInternal>();
            let value = instance(mockValue);
            o.eBasicInverseRemove(value, LibraryConstants.DOCUMENT_ROOT__LIBRARY, null);
        }
        {
            let mockValue = mock<EStringToStringMapEntryInternal>();
            let value = instance(mockValue);
            o.eBasicInverseRemove(
                mockValue,
                LibraryConstants.DOCUMENT_ROOT__XMLNS_PREFIX_MAP,
                null
            );
            expect(o.xMLNSPrefixMap.isEmpty());
        }
        {
            let mockValue = mock<EStringToStringMapEntryInternal>();
            let value = instance(mockValue);
            o.eBasicInverseRemove(
                mockValue,
                LibraryConstants.DOCUMENT_ROOT__XSI_SCHEMA_LOCATION,
                null
            );
            expect(o.xSISchemaLocation.isEmpty());
        }
    });
});
